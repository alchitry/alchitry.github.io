<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://alchitry.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://alchitry.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-07-29T00:00:00+00:00</updated>
    <id>https://alchitry.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Vivado Setup</title>
        <published>2025-07-29T00:00:00+00:00</published>
        <updated>2025-07-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/setup/vivado/"/>
        <id>https://alchitry.com/tutorials/setup/vivado/</id>
        
        <content type="html" xml:base="https://alchitry.com/tutorials/setup/vivado/">&lt;p&gt;The first step to setting up your environment is to install Vivado. Vivado is a program provided by Xilinx (the manufacture of the FPGA on the Au) that is used to build your projects. It holds all the secret sauce that converts your text into an FPGA configuration file (bin file).&lt;&#x2F;p&gt;
&lt;p&gt;Head over to Xilinx&#x27;s website and download the &lt;a href=&quot;https:&#x2F;&#x2F;www.xilinx.com&#x2F;support&#x2F;download.html&quot;&gt;Vivado here&lt;&#x2F;a&gt;. 
Avoid version 2020.3.&lt;&#x2F;p&gt;
&lt;p&gt;I recommend downloading the &lt;em&gt;Web Installer&lt;&#x2F;em&gt; as it will save you time. 
As of 2024.1, it they only offer the &lt;em&gt;Web Installer&lt;&#x2F;em&gt;.
During installation, you get to select what gets installed saving space as well.&lt;&#x2F;p&gt;
&lt;p&gt;You will need to create an account with Xilinx to download the software. 
This is required by the U.S. government since the software falls under some export regulations.&lt;&#x2F;p&gt;
&lt;p&gt;You will also need this account during installation for the web installer to be able to download the various components.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;launching-the-installer&quot;&gt;Launching the Installer&lt;&#x2F;h2&gt;
&lt;p&gt;If you are running Windows, double-click the .exe file that you downloaded.&lt;&#x2F;p&gt;
&lt;p&gt;If you are on Linux, you may need to add execution privileges to the .bin file. 
You can do that with the following command.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;chmod +x Xilinx_Vivado_File.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You will need to change the name of the .bin file to match the on you downloaded.&lt;&#x2F;p&gt;
&lt;p&gt;You can then run it. 
You don&#x27;t need root permissions if you are installing it somewhere you already have write permissions. 
I usually install mine to &lt;code&gt;&#x2F;opt&#x2F;Xilinx&lt;&#x2F;code&gt; which I have set up to be owned by me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;&#x2F;h2&gt;
&lt;p&gt;The installer itself is pretty straight forward. &lt;&#x2F;p&gt;
&lt;p&gt;First, you will have to log in to your account.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;setup&#x2F;login.png&quot; alt=&quot;Installer Login&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll then have to accept some terms and conditions. 
The page after that asks what product you would like to install.
Select &lt;em&gt;Vivado&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;setup&#x2F;vivado.png&quot; alt=&quot;Product Selection&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The next page asks what edition to install.
If you don&#x27;t want to pay for a license, select the &lt;em&gt;Standard&lt;&#x2F;em&gt; version.
The main difference between the two (other than cost) is the devices that are supported.
The free tier supports all the Alchitry boards.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;setup&#x2F;standard.png&quot; alt=&quot;Edition Selection&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The next page allows you to choose what you install.
The import option in our case is the &lt;em&gt;Artix-7 FPGAs&lt;&#x2F;em&gt; box under &lt;em&gt;7 Series&lt;&#x2F;em&gt; under &lt;em&gt;Devices&lt;&#x2F;em&gt;.
Nothing else is strictly required.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;setup&#x2F;artix.png&quot; alt=&quot;Install Components&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;On the next page, select where you want to install it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;setup&#x2F;install.png&quot; alt=&quot;Install Location&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now wack that &lt;em&gt;Install&lt;&#x2F;em&gt; button and let it do its thing.&lt;&#x2F;p&gt;
&lt;p&gt;When you go to use Alchitry Labs, you&#x27;ll need to point it to where Vivado is installed via the settings.
In my case, I pointed it to &lt;code&gt;&#x2F;opt&#x2F;Xilinx&#x2F;2025.1&#x2F;Vivado&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Register Interface</title>
        <published>2025-04-28T00:00:00+00:00</published>
        <updated>2025-04-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/register-interface/"/>
        <id>https://alchitry.com/tutorials/register-interface/</id>
        
        <summary type="html">&lt;p&gt;This tutorial will introduce you to the &lt;em&gt;Register Interface&lt;&#x2F;em&gt; component and how you can use it to easily implement
complex interfaces in your designs.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Constraints Reference</title>
        <published>2025-02-04T00:00:00+00:00</published>
        <updated>2025-02-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/alchitry-constraints-reference/"/>
        <id>https://alchitry.com/tutorials/alchitry-constraints-reference/</id>
        
        <content type="html" xml:base="https://alchitry.com/tutorials/alchitry-constraints-reference/">&lt;p&gt;This page is a reference for Alchitry Constraints V2.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;alchitry-constraints-file-contents&quot;&gt;Alchitry Constraints File Contents&lt;&#x2F;h1&gt;
&lt;p&gt;An Alchitry Constraints File (.acf extension) contains a list of &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#pin-constraints&quot;&gt;pin constraints&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comments&quot;&gt;Comments&lt;&#x2F;h2&gt;
&lt;p&gt;Comments take the same form as in &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#comments&quot;&gt;Lucid&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Use &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for a single line comment and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;*    *&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for a multi-line comment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pin-constraints&quot;&gt;Pin Constraints&lt;&#x2F;h2&gt;
&lt;p&gt;The main purpose of a pin constraint is to tell the tools which physical pin on the FPGA corresponds to a port 
of your design&#x27;s top-level module.&lt;&#x2F;p&gt;
&lt;p&gt;A pin constraint takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;acf&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-acf &quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; port_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PIN_NAME OPTIONAL_ATTRIBUTE_LIST
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;port_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; corresponds to a port of your top-level module.
If the port is an array, then it should also include &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#array-selection&quot;&gt;array selectors&lt;&#x2F;a&gt;
to select only a single bit.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PIN_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the physical pin to connect to &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;port_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
This name is the Alchitry pin name and not the pin name of the FPGA.
See the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#pinouts&quot;&gt;pinout section&lt;&#x2F;a&gt; for the various pin names.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;OPTIONAL_ATTRIBUTE_LIST&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a list of &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#attributes&quot;&gt;attributes&lt;&#x2F;a&gt; that apply to only this pin.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;attribute-block&quot;&gt;Attribute Block&lt;&#x2F;h2&gt;
&lt;p&gt;Specifying attributes for every single pin constraint would often become very tedious as many pins will share the same attribute values.
This is where attribute blocks come into play.
They take a very similar form to the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#connection-blocks&quot;&gt;connection blocks&lt;&#x2F;a&gt; in Lucid.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;acf&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-acf &quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;ATTRIBUTES_LIST &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;ATTRIBUTES_LIST&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a comma-seperated list of &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#attributes&quot;&gt;attributes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The attributes in the list are applied to every &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#pin-constraints&quot;&gt;pin constraint&lt;&#x2F;a&gt; inside the brackets.&lt;&#x2F;p&gt;
&lt;p&gt;Attribute blocks can also be nested to allow for fine-grained assignments.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the Hd constraints uses two &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STANDARD&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks along with a single &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PINOUT&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;acf&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-acf &quot;&gt;&lt;code class =&quot;short language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PINOUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STANDARD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LVCMOS33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; standard 3.3V IO standard
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_sda_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A70
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_scl_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A72
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_cec_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A76
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_hp_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A78
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_sda_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A69
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_scl_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A71
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_cec_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A75
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_hp_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A77
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STANDARD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;TMDS_33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; HDMI IO standard
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_clk_1_p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A48
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_clk_1_n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A46
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_1_p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A54
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_1_n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A52
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_1_p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A60
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_1_n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A58
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_1_p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A66
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_1_n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A64
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_clk_2_p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A47
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_clk_2_n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A45
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_2_p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A53
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_2_n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A51
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_2_p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A59
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_2_n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A57
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_2_p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A65
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;pin&lt;&#x2F;span&gt;&lt;span&gt; hdmi_data_2_n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A63
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;attributes&quot;&gt;Attributes&lt;&#x2F;h2&gt;
&lt;p&gt;An attribute takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;acf&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-acf &quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;ATTRIBUTE_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;attribute_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This assigns the value, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;attribute_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, to the attribute named &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;ATTRIBUTE_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are a handful of different attributes currently supported.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pinout&quot;&gt;PINOUT&lt;&#x2F;h3&gt;
&lt;p&gt;This attribute is either &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PT_ALPHA&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, or not specified.&lt;&#x2F;p&gt;
&lt;p&gt;When it is specified, it says that the pinout used for that pin should use that version&#x27;s pin mapping.&lt;&#x2F;p&gt;
&lt;p&gt;When it isn&#x27;t specified, the project&#x27;s board&#x27;s version is used.
For example, an Au V1 will use &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the time, if specified, it should match the board&#x27;s version.
However, if a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; pinout is specified when using a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; board, then the tools assume you are using a 
&lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;products&#x2F;alchitry-v2-v1-adapter&quot;&gt;V2-&amp;gt;V1 adapter&lt;&#x2F;a&gt;.
In this case, the tools will translate the pinout to the adapter&#x27;s pinout.&lt;&#x2F;p&gt;
&lt;p&gt;If a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; version is used with a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; board an error is thrown.&lt;&#x2F;p&gt;
&lt;p&gt;The value &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PT_ALPHA&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is specifically for the first batch of Pt boards that had a pinout error.
It is only valid when &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#side&quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIDE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is set to &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;TOP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
The bottom pinout of the alpha boards should use a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PINOUT&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; of &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;side&quot;&gt;SIDE&lt;&#x2F;h3&gt;
&lt;p&gt;Most boards only have ports on the top side.
However, the &lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;products&#x2F;alchitry-pt&quot;&gt;Pt&lt;&#x2F;a&gt; has pins on both sides.&lt;&#x2F;p&gt;
&lt;p&gt;To distinguish between the top and bottom, the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIDE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; attribute was added.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIDE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can have a value of &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;TOP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BOTTOM&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
It defaults to &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;TOP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the Pt, the top and bottom connectors both have banks A and B, and the pin names are identical.
This means that a constraint file that works for the top of the board can be simply wrapped in a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIDE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BOTTOM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; attribute
block to use the board with the bottom connectors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;standard&quot;&gt;STANDARD&lt;&#x2F;h3&gt;
&lt;p&gt;This specifies the IO standard to apply to the pin.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the time, it will be set to &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LVCMOS33&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
This is the basic 3.3V IO standard.
It is also the only standard supported by the &lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;products&#x2F;alchitry-cu-v2&quot;&gt;Cu&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;products&#x2F;alchitry-au&quot;&gt;Au&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;products&#x2F;alchitry-pt&quot;&gt;Pt&lt;&#x2F;a&gt; both
support the same IO standards.
There are too many standards to list here, but page 98 of &lt;a href=&quot;https:&#x2F;&#x2F;docs.amd.com&#x2F;v&#x2F;u&#x2F;en-US&#x2F;ug471_7Series_SelectIO&quot;&gt;UG471&lt;&#x2F;a&gt;
has a nice table summarizing the requirements for each standard.&lt;&#x2F;p&gt;
&lt;p&gt;Each IO standard has various requirements that must be met in order for it to be used.
The biggest one is the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vcco&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; voltage.
All the pins on the Cu and most of the Au and Pt have &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vcco&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; fixed at 3.3V.&lt;&#x2F;p&gt;
&lt;p&gt;The Au and Pt have one group of pins that can have &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vcco&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; switched between 3.3V, 2.5V, and 1.8V.
This drastically opens up the IO standards available on these pins.&lt;&#x2F;p&gt;
&lt;p&gt;For example, by setting &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vcco&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to 2.5V, the tri-voltage pins can be used as &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LVDS_25&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; outputs or enable termination 
when used as inputs.
Any pins on the Au&#x2F;Pt can be used as &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LVDS_25&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; inputs as long as they don&#x27;t use internal termination.&lt;&#x2F;p&gt;
&lt;p&gt;The other common requirement is the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vref&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; voltage.
Many standards don&#x27;t require a specific &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vref&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and for the ones that do, an internal reference can typically be used.
However, only one &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vref&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be set for a bank of pins.
Here, &lt;em&gt;bank&lt;&#x2F;em&gt; refers not to the connector&#x27;s bank but rather the FPGA&#x27;s internal bank.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;docs&#x2F;Au-V2&#x2F;AuSchematic.pdf&quot;&gt;Au&#x27;s schematic&lt;&#x2F;a&gt;, the bank number is the first number 
of the FPGA&#x27;s IO signal names.
On page 2, you can see the header&#x27;s pinout as well as the associated pin banks for each signal.
The banks are numbers like &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;14&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;34&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;35&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All the IO standards used in a bank must have at most one &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Vref&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; requirement.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;frequency&quot;&gt;FREQUENCY&lt;&#x2F;h3&gt;
&lt;p&gt;This attribute marks the pin as a clock input with the given frequency.&lt;&#x2F;p&gt;
&lt;p&gt;The frequency value takes the form of a number followed by a frequency unit.
The unit can be &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;Hz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;KHz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;MHz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;GHz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
For example, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;100MHz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Clock inputs should also be typically placed on a clock capable input pin.
Xilinx (for the Au&#x2F;Pt) calls these &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;MRCC&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SRCC&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; pins.
Lattice (for the Cu) calls these &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;GBIN&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
You can look at each board&#x27;s schematic to see what pins are clock capable inputs.&lt;&#x2F;p&gt;
&lt;p&gt;For V2 boards, pins &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A41&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A42&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A47&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A48&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B41&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B42&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B47&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are clock capable inputs.&lt;&#x2F;p&gt;
&lt;p&gt;The Au also includes &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B48&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Pt also includes &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B24&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B29&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B30&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;B48&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;C41&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;C42&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;C47&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;C48&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;D41&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;D42&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;D47&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;D48&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pull&quot;&gt;PULL&lt;&#x2F;h3&gt;
&lt;p&gt;This attribute is used to enable a pin&#x27;s pull-up or pull-down resistors.&lt;&#x2F;p&gt;
&lt;p&gt;For the Cu, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;UP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the only valid value.&lt;&#x2F;p&gt;
&lt;p&gt;For the Au&#x2F;Pt, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;UP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DOWN&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;KEEP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are valid values.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;UP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; enables a weak pull-up.
&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DOWN&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; enables a weak pull-down.
&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;KEEP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; enables a weak pull to the same value the pin currently is (0 -&amp;gt; pull-down, 1 -&amp;gt; pull-up).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drive&quot;&gt;DRIVE&lt;&#x2F;h3&gt;
&lt;p&gt;The attribute specifies the drive strength of the pin in mA.&lt;&#x2F;p&gt;
&lt;p&gt;It is not supported by the Cu.&lt;&#x2F;p&gt;
&lt;p&gt;It is only valid when paired with specific &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#standard&quot;&gt;IO standards&lt;&#x2F;a&gt;.
For the valid values of each standard, see table 1-56 on page 101 of &lt;a href=&quot;https:&#x2F;&#x2F;docs.amd.com&#x2F;v&#x2F;u&#x2F;en-US&#x2F;ug471_7Series_SelectIO&quot;&gt;UG471&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LVCMOS33&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; on the Au&#x2F;Pt, these are &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;12&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;16&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This number specifies the drive strength in mA and defaults to &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;12&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;slew&quot;&gt;SLEW&lt;&#x2F;h3&gt;
&lt;p&gt;This attribute specifies the slew rate of the pin and is only supported by the Au&#x2F;Pt, not the Cu.&lt;&#x2F;p&gt;
&lt;p&gt;The slew rate is how fast the edge transitions.&lt;&#x2F;p&gt;
&lt;p&gt;It is only valid when paired with specific &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#standard&quot;&gt;IO standards&lt;&#x2F;a&gt;.
For the valid values of each standard, see table 1-56 on page 101 of &lt;a href=&quot;https:&#x2F;&#x2F;docs.amd.com&#x2F;v&#x2F;u&#x2F;en-US&#x2F;ug471_7Series_SelectIO&quot;&gt;UG471&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For standards that support a slew rate, the valid values are &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;FAST&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SLOW&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SLOW&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; being the default.&lt;&#x2F;p&gt;
&lt;p&gt;Using a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;FAST&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; slew rate may help with high speed signals but may also cause more power consumption and noise if not 
used carefully.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;diff-term&quot;&gt;DIFF_TERM&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DIFF_TERM&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; attribute specifies if internal differential termination should be enabled.
It can have a value of &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and defaults to &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;FALSE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is only available with some &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;alchitry-constraints-reference&#x2F;#standard&quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STANDARD&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; values on the Au and Pt.
See &lt;a href=&quot;https:&#x2F;&#x2F;docs.amd.com&#x2F;v&#x2F;u&#x2F;en-US&#x2F;ug471_7Series_SelectIO&quot;&gt;UG471&lt;&#x2F;a&gt; for details on which ones.&lt;&#x2F;p&gt;
&lt;p&gt;It is most often used with &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LVDS_25&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; on the tri-voltage pins.
Using internal termination requires that VCCO be set to 2.5V for the pins using it.
Failing to set the tri-voltage pins correctly could damage the FPGA.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pinouts&quot;&gt;Pinouts&lt;&#x2F;h1&gt;
&lt;p&gt;The available pins vary depending on your board, but they follow a standard format.&lt;&#x2F;p&gt;
&lt;p&gt;The pins broken out on the connectors are named by the bank letter followed by the pin number.
For example, pin 2 on bank A is &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The V2 boards have two banks on top, A and B.
The &lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;products&#x2F;alchitry-pt&quot;&gt;Pt&lt;&#x2F;a&gt; has two more on the bottom. 
They&#x27;re also called A and B but distinguished via the &lt;&#x2F;p&gt;
&lt;p&gt;The V1 boards have four banks, A, B, C, and D on top.&lt;&#x2F;p&gt;
&lt;p&gt;Check the schematic for the &lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;docs&#x2F;alchitry_cu_sch.pdf&quot;&gt;Cu V1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;docs&#x2F;alchitry_au_sch.pdf&quot;&gt;Au V1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;docs&#x2F;Cu-V2&#x2F;CuSchematic.pdf&quot;&gt;Cu V2&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;docs&#x2F;Au-V2&#x2F;AuSchematic.pdf&quot;&gt;Au V2&lt;&#x2F;a&gt; for what pins are populated on the connectors.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the pins on the connectors, there are some special internal pin names.&lt;&#x2F;p&gt;
&lt;p&gt;All boards have the pins &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LED0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;-&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;LED7&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;RESET&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLOCK&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_RX&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_TX&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Cu (V1 and V2) also have &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_MOSI&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_MISO&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_SCK&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_SS&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that connect to the configuration flash.&lt;&#x2F;p&gt;
&lt;p&gt;The Au (V1, V1+, and V2) and Pt also have &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_D0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;-&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_D3&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_SCK&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SPI_SS&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that connect to the configuration flash.
There is also &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VP&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VN&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; which are special analog inputs.&lt;&#x2F;p&gt;
&lt;p&gt;The Pt also has &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;C29&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; - &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;C36&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that connect to where the LED signals on the Au and Cu are broken out on the control connector.
The LED signals aren&#x27;t broken out on the Pt.&lt;&#x2F;p&gt;
&lt;p&gt;The Pt also has &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_D2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; - &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_D7&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_RXF&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_TXE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_RD&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_WR&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_SIWUI&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for using the FIFO-based 
interface with the FTDI chip.
Note that what would be &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_D0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_RX&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_D1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;USB_TX&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, there are &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DQ0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;-&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DQ15&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DQS0_P&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DQS0_N&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DQS1_P&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DQS1_N&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DM0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_DM1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;,
&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_ODT&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_RESET&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_BA0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;-&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_BA2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_CK_P&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_CK_N&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_CKE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_CS&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_RAS&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_CAS&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_WE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;,
&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_A0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;-&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DDR_A13&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for interfacing with the DDR3.
You generally shouldn&#x27;t specify these directly as the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;ddr3-memory&#x2F;&quot;&gt;MIG core&lt;&#x2F;a&gt; does it for you.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;native-constraints&quot;&gt;Native Constraints&lt;&#x2F;h1&gt;
&lt;p&gt;Sometimes you may need to do something more advanced that isn&#x27;t directly supported within the Alchitry Constraint Format.
For those cases, you can use a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;native&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;native&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;acf&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-acf &quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;native &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; Native constraints here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The text inside the block will be inserted into the final constraint file mostly as is.
This allows you to write &lt;a href=&quot;https:&#x2F;&#x2F;docs.amd.com&#x2F;r&#x2F;en-US&#x2F;ug903-vivado-using-constraints&#x2F;About-XDC-Constraints&quot;&gt;XDC&lt;&#x2F;a&gt; constraints
for the Au or Pt and SDC constraints for the Cu.&lt;&#x2F;p&gt;
&lt;p&gt;Inside the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;native&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block, you have access to two helper functions. &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function allows you to access the Alchitry pin converter inside the native block.
This lets you use the names of the pins on the connectors instead of the FPGA&#x27;s pin.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_pin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, when used with the Au, will be replaced by &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;N6&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; (the name of the FPGA pin).&lt;&#x2F;p&gt;
&lt;p&gt;If the native block is wrapped in an attribute block specifying a &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PINOUT&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIDE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, that is taken into account
during the translation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;&lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function allows you to get the name of a top-level port.
The name of the port in Lucid isn&#x27;t always exactly the same in the translated files, and this function ensures you use
the correct name.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will be replaced with the name of the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; signal (most likely just &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The port should also include all the indexing.
This is where translation often differs from Lucid to the final name.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;acf_port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;led&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;])&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will be replaced with the correct port name for the &lt;code class =&quot;language-acf&quot; data-lang=&quot;acf&quot;&gt;&lt;span&gt;led&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; signal.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lucid Reference</title>
        <published>2025-02-04T00:00:00+00:00</published>
        <updated>2025-02-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/lucid-reference/"/>
        <id>https://alchitry.com/tutorials/lucid-reference/</id>
        
        <content type="html" xml:base="https://alchitry.com/tutorials/lucid-reference/">&lt;p&gt;This page is a reference for the Lucid V2 language.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lucid-file-contents&quot;&gt;Lucid File Contents&lt;&#x2F;h1&gt;
&lt;p&gt;Every Lucid file (.luc extension) can contain  &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#modules&quot;&gt;module&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#testbenches&quot;&gt;testbench&lt;&#x2F;a&gt;, and&#x2F;or &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#globals&quot;&gt;global&lt;&#x2F;a&gt; declarations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;&#x2F;h2&gt;
&lt;p&gt;Modules are the core of any Lucid project. They are where you define a block of functionality.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; declaration takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt; module_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; optional parameter list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; port list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; module body
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;parameters&quot;&gt;Parameters&lt;&#x2F;h3&gt;
&lt;p&gt;Parameters provide a way for a module to be customized when it is &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;instantiated&lt;&#x2F;a&gt; to improve code reuse.&lt;&#x2F;p&gt;
&lt;p&gt;All parameters must be constant as they are replaced during synthesis (build time).&lt;&#x2F;p&gt;
&lt;p&gt;Parameters are defined in list of comma separated parameter declarations between &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#(&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is optional and can be completely omitted.&lt;&#x2F;p&gt;
&lt;p&gt;Each parameter declaration takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; default_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; test_condition
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt; test_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; test_condition
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the parameter. 
Parameter names, like &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constants&lt;&#x2F;a&gt;, must be made up of only capital letters and underscores.&lt;&#x2F;p&gt;
&lt;p&gt;Everything besides &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is optional.&lt;&#x2F;p&gt;
&lt;p&gt;In the first example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; default_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, will provide a default value for the parameter. If a default value is provided, when the module is &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;instantiated&lt;&#x2F;a&gt; the parameter can be omitted.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to require a value to be provided when the module in &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;instantiated&lt;&#x2F;a&gt; then you can use the form in the second example of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt; test_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. 
With this form, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;test_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is used as an example value to test your module in a stand-alone fashion by Alchitry Labs. However, it won&#x27;t be used when the module is instantiated.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;test_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;default_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be omitted but this will hinder the amount of error checking Alchitry Labs can perform on your module until it is instantiated.&lt;&#x2F;p&gt;
&lt;p&gt;The last piece, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; test_condition&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; provides a condition to test the parameter against. If it is false (evaluates to 0), then an error is thrown when the module is &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;instantiated&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;test_condition&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be any &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#expressions&quot;&gt;expression&lt;&#x2F;a&gt; that evaluates to a number and references only this parameter or any previously declared parameters (ones that appear before this one in the list).&lt;&#x2F;p&gt;
&lt;p&gt;An example full declaration could look like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;100000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; clock frequency
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; desired baud rate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If a parameter has a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;default_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; provided, then any value assigned to the module during instantiation, must be compatible with the width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;default_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For a width to be &lt;em&gt;compatible&lt;&#x2F;em&gt; all of its dimensions except the outermost dimension must match.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if a parameter was declared as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; then any value assigned to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must has the width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be anything.&lt;&#x2F;p&gt;
&lt;p&gt;If the parameter is a simple number, or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;default_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is omitted, then the width of the parameter is assumed to be a simple (1D) array.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ports&quot;&gt;Ports&lt;&#x2F;h3&gt;
&lt;p&gt;Ports are how modules connect to the outside world.&lt;&#x2F;p&gt;
&lt;p&gt;They act similar to &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sig&quot;&gt;signals&lt;&#x2F;a&gt; but have a direction associated with them.&lt;&#x2F;p&gt;
&lt;p&gt;Ports are defined in a comma separated list of port declarations between &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Note that this differs from the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#parameters&quot;&gt;parameter list&lt;&#x2F;a&gt; in that opening symbol is simply &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; instead of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#(&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each port declaration takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;span&gt; direction port_name port_size
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; optionally marks the port to be interpreted as &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;direction&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is one of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;input&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;output&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. The details of these are below.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;port_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the port and must start with a lowercase letter. 
It can then be followed by letters, numbers, and underscores.&lt;br &#x2F;&gt;
It is convention for it to be &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The port can have an optional &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;port_size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. 
This follows the format defined in &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sizing&quot;&gt;sizing&lt;&#x2F;a&gt;. 
If it is omitted, then the port is a single bit wide.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;input&quot;&gt;input&lt;&#x2F;h4&gt;
&lt;p&gt;Inputs are read-only signals passed into the module. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;output&quot;&gt;output&lt;&#x2F;h4&gt;
&lt;p&gt;Outputs are write-only signals passed out of module.&lt;&#x2F;p&gt;
&lt;p&gt;Typically, they will have a value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. However, if they connect directly to a top-level output (pin on the FPGA) they can also have the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; meaning high-impedance (not driven).&lt;&#x2F;p&gt;
&lt;p&gt;Signals inside an FPGA don&#x27;t have a mechanism for realizing &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; so this can&#x27;t be used internally.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;inout&quot;&gt;inout&lt;&#x2F;h4&gt;
&lt;p&gt;Inouts provide a way to create a bidirectional signal.&lt;&#x2F;p&gt;
&lt;p&gt;These can&#x27;t be used internally in the FPGA and are only valid to be connected directly to a top-level &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; (pin on the FPGA).&lt;&#x2F;p&gt;
&lt;p&gt;When an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is written, the value will dictate if the pin&#x27;s driver is enabled. 
If it is anything other than &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; the driver will be enabled. 
A value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will disable the driver and leave the pin floating to be driven externally.&lt;&#x2F;p&gt;
&lt;p&gt;When an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is read, the value at the actual pin is read. The value will never be &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A module with an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;instantiated&lt;&#x2F;a&gt; inside another module as long as the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is passed directly to an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; of the parent module. It can&#x27;t be interacted with inside the FPGA.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;module-body&quot;&gt;Module Body&lt;&#x2F;h3&gt;
&lt;p&gt;A module body consists of any number of the following statement types between &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; at the end of a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#modules&quot;&gt;module declaration&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;type-declarations&quot;&gt;Type Declarations&lt;&#x2F;h4&gt;
&lt;p&gt;Inside the module body, local types can be defined.&lt;&#x2F;p&gt;
&lt;p&gt;These can be &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sig&quot;&gt;signals&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#dff&quot;&gt;DFFs&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constants&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#enum&quot;&gt;enums&lt;&#x2F;a&gt; as defined in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#types&quot;&gt;types&lt;&#x2F;a&gt; section.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;module-instances&quot;&gt;Module Instances&lt;&#x2F;h4&gt;
&lt;p&gt;A module can contain sub-modules. When you use a module, that is called &lt;em&gt;instantiation&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A module instantiation takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_type module_instance_name optional_array_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt; port_and_param_connections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of a previously defined module to be instantiated.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_instance_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of this particular &lt;em&gt;instance&lt;&#x2F;em&gt;. It must start with a lowercase letter. It can then be followed by letters, numbers, and underscores. 
It is convention for it to be &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;optional_array_size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; follows the format defined in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sizing&quot;&gt;sizing&lt;&#x2F;a&gt; section for arrays. Structs are not supported for module instances.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;optional_array_size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is omitted, a single instance of the module is created.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;optional_array_size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is provided, an instance of the module will be created for every index in the specified size. Each port of every instance is concatenated into a single multidimensional port.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if the module, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, had an output named &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;out&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that was 1 bit wide and we instantiated 8 copies it with the following, then &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_instance_name.out&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would be an 8-bit wide array with each index corresponding to each copy.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_type module_instance_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;out&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; was already an array then &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_instance_name.out&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would be a 2-D array of size &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the size of a single &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;out&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;port_and_param_connections&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are a comma separated list of connections to ports and parameters.&lt;&#x2F;p&gt;
&lt;p&gt;Port connections take the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.port_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;port_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;port_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the port and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;port_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the value to connect to it. &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;port_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be an &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#expressions&quot;&gt;expression&lt;&#x2F;a&gt; of matching width.&lt;&#x2F;p&gt;
&lt;p&gt;Parameter connections take the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;param_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the parameter and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;param_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the value to assign to it. &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;param_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be a constant &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#expressions&quot;&gt;expression&lt;&#x2F;a&gt; that can be evaluated during synthesis.&lt;&#x2F;p&gt;
&lt;p&gt;Port and parameter connections can be presented in any order. Convention is to list all parameters first.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;connection-blocks&quot;&gt;Connection Blocks&lt;&#x2F;h4&gt;
&lt;p&gt;When declaring many &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#dff&quot;&gt;DFFs&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;modules&lt;&#x2F;a&gt;, you may find yourself specifying the same connection over and over. This is where connection blocks are helpful.&lt;&#x2F;p&gt;
&lt;p&gt;Connection blocks allow you to define a connection to a port or parameter for all instances inside of them. The most common use case for this is connecting the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; port of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; signal in the module.&lt;&#x2F;p&gt;
&lt;p&gt;Connection blocks take the following format. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;connection_list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	declaration_or_connection_block
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;connection_list&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a comma separated list of port and parameter connections with the same format used during a typical &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;module instantiation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Inside the block, you can instantiate modules or &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#dff&quot;&gt;DFFs&lt;&#x2F;a&gt;. You can also nest other connection blocks.&lt;&#x2F;p&gt;
&lt;p&gt;A common use case is to have two nested connection blocks. The outer one for the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; port and the inner one for the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;rst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; port.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    .rst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;rst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;span&gt; with_reset
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;span&gt; without_reset
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows you to easily create &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with and without resets.&lt;&#x2F;p&gt;
&lt;p&gt;If the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or module instance is an array, the connections in the connection blocks are connected to each individual instance instead of to the concatenated value.&lt;&#x2F;p&gt;
&lt;p&gt;This can be helpful if you have an array modules and want to use the same parameter value for each one.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    module_type my_module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the above example, all eight instances of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will have their parameter, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; set to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;10&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we wanted to assign different values to each one, they would need to be assigned inline as an array.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;module_type my_module&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;](#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This does not apply to the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. 
The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;rst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; inputs are always 1 bit and the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;INIT&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; parameter always applies to the full &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;always-blocks&quot;&gt;Always Blocks&lt;&#x2F;h4&gt;
&lt;p&gt;Always blocks provide a way to describe complex behavior in a way that resembles traditional programming.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block takes the following format.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    always_statements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;always_statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are defined in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#always-test-block-statements&quot;&gt;block statements&lt;&#x2F;a&gt; section.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block can contain any number of these separated by new lines or semicolons.&lt;&#x2F;p&gt;
&lt;p&gt;The statements are evaluated top-down. This means lower statements take precedent over higher ones.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if you assigned the signal &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;led&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; the value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; then immediately assigned it &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; the first assignment would be ignored.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    led &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    led &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is &lt;em&gt;identical&lt;&#x2F;em&gt; to simply removing the first assignment.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block describes the desired behavior for part of your design. It is not actually &lt;em&gt;run&lt;&#x2F;em&gt; like typical code would be. The tools look at the block and figure out a way to make a circuit that would behave the same way. This means that there are some restrictions.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#repeat&quot;&gt;repeat&lt;&#x2F;a&gt; loops must have a fixed number of iterations. This is because there isn&#x27;t actually a way to loop with hardware and the loop must be unrolled.&lt;&#x2F;p&gt;
&lt;p&gt;If a signal is written inside an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block, it must be written in all possible cases.&lt;&#x2F;p&gt;
&lt;p&gt;For example, this is not allowed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the case that &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is false, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;my_sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; won&#x27;t have a value.&lt;&#x2F;p&gt;
&lt;p&gt;This could be remedied by adding an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;else&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; clause or by assigning a value before the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; default value
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These two blocks are functionally identical and the choice for each depends on your use case.&lt;&#x2F;p&gt;
&lt;p&gt;If it is a simple assignment like this, you may prefer the first.&lt;&#x2F;p&gt;
&lt;p&gt;If you have a reasonable default with complex logic for when it should deviate, use the second.&lt;&#x2F;p&gt;
&lt;p&gt;An exception to this rule is for &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#dff&quot;&gt;DFFs&lt;&#x2F;a&gt;. The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; doesn&#x27;t need to always be driven. This is because the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input is implicitly assigned the value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.q&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; at the start of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;p&gt;If the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input isn&#x27;t assigned, then the value of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; won&#x27;t change.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example where the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will only increment when &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is true.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;       my_dff.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; my_dff.q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the beginning of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;my_dff.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; my_dff.q&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is implicitly added making this valid.&lt;&#x2F;p&gt;
&lt;p&gt;If an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block writes a signal, it is the driver for that signal meaning it can&#x27;t be driven else where. In other words, a signal can be written in only one &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;globals&quot;&gt;Globals&lt;&#x2F;h2&gt;
&lt;p&gt;Globals allow you declare are group of &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constants&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#struct&quot;&gt;structs&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#enum&quot;&gt;enums&lt;&#x2F;a&gt; that are available anywhere in your project.&lt;&#x2F;p&gt;
&lt;p&gt;A global declaration takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;GlobalName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    declarations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;GlobalName&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;global&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; namespace. All the definitions in it are accessed by using &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;GlobalName&lt;&#x2F;span&gt;&lt;span&gt;.declaration_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. It must start with a capital letter and contain at least one lowercase letter. Convention is to use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;UpperCamelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;GlobalName&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be unique across the entire project.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;declarations&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are  &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constants&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#struct&quot;&gt;structs&lt;&#x2F;a&gt;, or &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#enum&quot;&gt;enums&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;MyGlobal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;100000000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;IDLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; color_struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These can be accessed later with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;MyGlobal&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;MyGlobal&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;MyGlobal&lt;&#x2F;span&gt;&lt;span&gt;.color_struct&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testbenches&quot;&gt;Testbenches&lt;&#x2F;h2&gt;
&lt;p&gt;Testbenches look very similar to &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#modules&quot;&gt;modules&lt;&#x2F;a&gt;, but they serve as a way to run simulations.&lt;&#x2F;p&gt;
&lt;p&gt;The basic format is as follows.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;testbench&lt;&#x2F;span&gt;&lt;span&gt; testbench_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    testbench_body
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;testbench_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; follows the same conventions as module names. 
It must start with a lower case letter and can be followed by letters, numbers, or underscores. 
It is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; by convention.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;testbench_body&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is basically the same as the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#modules&quot;&gt;module body&lt;&#x2F;a&gt; in the way can instantiate modules and DFFs or declare constants, enums, and structs.&lt;&#x2F;p&gt;
&lt;p&gt;However, instead of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks you have &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks. You can also declare &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#user-created&quot;&gt;functions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-blocks&quot;&gt;Test Blocks&lt;&#x2F;h3&gt;
&lt;p&gt;The rules inside a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block are similar to those inside of an &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#always-blocks&quot;&gt;always&lt;&#x2F;a&gt; block except that things are actually run sequentially like code.&lt;&#x2F;p&gt;
&lt;p&gt;The simulation will run each line in the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block line by line. Special test-only &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#simulation-only&quot;&gt;functions&lt;&#x2F;a&gt; let you control the flow of the simulation.&lt;&#x2F;p&gt;
&lt;p&gt;A test block takes the following format.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt; test_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    test_statements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword is followed by the name of the test, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;test_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, which must start with a lowercase letter and can be followed by letters, numbers, or underscores.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;test_statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be any statements described in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#always-test-block-statements&quot;&gt;statements&lt;&#x2F;a&gt; section.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;comments&quot;&gt;Comments&lt;&#x2F;h1&gt;
&lt;p&gt;Comments can appear anywhere and are ignored by the Lucid parser. They share the same format as C&#x2F;Java comments.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;single-line-comments&quot;&gt;Single Line Comments&lt;&#x2F;h3&gt;
&lt;p&gt;Single line comments take the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; my comment
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; denotes the start of the comment and it continues to the end of the line.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;multi-line-comments&quot;&gt;Multi-line Comments&lt;&#x2F;h3&gt;
&lt;p&gt;Multi-line comments take the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;* inline comment *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;* 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;    multi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;    line
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;    comment
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The comment is everything between the two markers, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;* and *&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;They doesn&#x27;t necessarily have to be on different lines and can be used to place a comment inline with code.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;signals&quot;&gt;Signals&lt;&#x2F;h1&gt;
&lt;p&gt;Basically any named value in Lucid can be thought of as a signal. This includes the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type, ports on a module or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and even a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sizing&quot;&gt;Sizing&lt;&#x2F;h2&gt;
&lt;p&gt;When declaring a type, you can specify the width of that type with any number of &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#arrays&quot;&gt;array&lt;&#x2F;a&gt;  dimensions followed by an optional &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#struct&quot;&gt;struct&lt;&#x2F;a&gt; type with the following format.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After the array sizes, you can specify a struct type using the syntax &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is some previously declared &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#struct&quot;&gt;struct&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;The only exception to this is module instances don&#x27;t support structs.&lt;&#x2F;p&gt;
&lt;p&gt;All of the components of a signals size are optional and if omitted it defaults to 1 (either a bit or a single module instance).&lt;&#x2F;p&gt;
&lt;p&gt;If you declare something with both, you will have an array of that struct. Here is an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; a_few_colors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A component of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;a_few_colors&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; could be accessed like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;a_few_colors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.r&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. To get the least significant bit of green for index 2 we could use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;a_few_colors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arrays&quot;&gt;Arrays&lt;&#x2F;h3&gt;
&lt;p&gt;An array is a list consisting of elements of all the same size.&lt;&#x2F;p&gt;
&lt;p&gt;To make an array, you use the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; syntax where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is some constant. These can be chained together to form multi-dimensional arrays.&lt;&#x2F;p&gt;
&lt;p&gt;A 1-D array is treated as a binary number. See the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#expressions&quot;&gt;expressions&lt;&#x2F;a&gt; section for some examples.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;struct&quot;&gt;struct&lt;&#x2F;h3&gt;
&lt;p&gt;Structs are a way to split a signal into arbitrary named sections.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike an array that requires each element to be identical in size, in a struct, each element can be have any width.&lt;&#x2F;p&gt;
&lt;p&gt;The syntax of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; declaration looks like the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; struct_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    struct_elements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;struct_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the struct. It must start with a lowercase letter and can be followed by letters, numbers, or underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;struct_elements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are a comma separated list of elements. Each element takes the following format.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;span&gt; element_name signal_width
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword is optional and will mark this element to be treated as a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt; value. If the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;signal_width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; has a struct component to it, this does nothing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;element_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the element. It must start with a lowercase letter and can be followed by letters, numbers, or underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. It must be unique inside this struct.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;signal_width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is an optional width for the element as specified in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sizing&quot;&gt;sizing&lt;&#x2F;a&gt; section.&lt;&#x2F;p&gt;
&lt;p&gt;An example struct for holding a 24 bit color could look like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Components of the struct are accessed via the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.element_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; syntax.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;signal-selection&quot;&gt;Signal Selection&lt;&#x2F;h2&gt;
&lt;p&gt;When reading or writing a signal, if it isn&#x27;t a single bit, you may need access only part of it. How you do this depends on the width of the signal.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;array-selection&quot;&gt;Array Selection&lt;&#x2F;h3&gt;
&lt;p&gt;If the signal is an array, you can use any of the array selectors to access part of it.&lt;&#x2F;p&gt;
&lt;p&gt;There are three main types of array selectors. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;index-selector&quot;&gt;Index Selector&lt;&#x2F;h4&gt;
&lt;p&gt;This selector is used to select a single index out of an array and takes the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;idx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The selector, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;idx&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, doesn&#x27;t need to be constant.&lt;&#x2F;p&gt;
&lt;p&gt;This is the only selector that can have another array selector following it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;constant-range-selector&quot;&gt;Constant Range Selector&lt;&#x2F;h4&gt;
&lt;p&gt;You can select a range of indices using the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; syntax.&lt;&#x2F;p&gt;
&lt;p&gt;The values of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;max&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;min&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be constant values and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;max&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be greater or equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;min&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This selector will select all the indices from &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;min&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;max&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; including both.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;fixed-width-selector&quot;&gt;Fixed Width Selector&lt;&#x2F;h4&gt;
&lt;p&gt;You will sometimes need to select multiple bits using a dynamic index. This is where the fixed width selector is helpful.&lt;&#x2F;p&gt;
&lt;p&gt;With the selector you specify a starting index then how many bits to include above or below including the start bit.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+:&lt;&#x2F;span&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to select a total of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; bits starting at &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and going up or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;-:&lt;&#x2F;span&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to select &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; bits starting at &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; but going down.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would select indices 4, 5, and 6. &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;-:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would select indices 4, 3, and 2.&lt;&#x2F;p&gt;
&lt;p&gt;The value used for &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be constant. However, the value used for &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be dynamic.&lt;&#x2F;p&gt;
&lt;p&gt;The reason for this is so that the resulting selection is always a fixed width.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;negative-indices&quot;&gt;Negative Indices&lt;&#x2F;h4&gt;
&lt;p&gt;The indices for the selectors can also be negative.
When an index is negative, it wraps around to the highest value. &lt;&#x2F;p&gt;
&lt;p&gt;For example, if you had an 8 bit wide signal then index &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would be the same as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
An index of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would be the same as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and so on.
An index of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; would be out of bounds and invalid.&lt;&#x2F;p&gt;
&lt;p&gt;The actual index used is essentially the negative value plus the width of the signal.&lt;&#x2F;p&gt;
&lt;p&gt;Many times a signal&#x27;s width is defined by a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constant&lt;&#x2F;a&gt; or a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#parameters&quot;&gt;parameter&lt;&#x2F;a&gt; to allow it to be easily changed.
Negative indices makes it easy to access the MSB of a signal regardless of its width.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;struct-selection&quot;&gt;Struct Selection&lt;&#x2F;h3&gt;
&lt;p&gt;If a signal is a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#struct&quot;&gt;struct&lt;&#x2F;a&gt; then to select an element from it you use the syntax &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;my_struct_signal.element_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This assumes the signal &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;my_struct_signal&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type that has an element named &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;element_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;types&quot;&gt;Types&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;sig&quot;&gt;sig&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type is short for &lt;em&gt;signal&lt;&#x2F;em&gt;. These are used as basic connections between parts of your design.&lt;&#x2F;p&gt;
&lt;p&gt;Each &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must have a single driver. Something that provides a value at all times as they have no state themselves.&lt;&#x2F;p&gt;
&lt;p&gt;Declaring a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; sig_name sig_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; expression
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything other than the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;sig_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are optional.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; optionally marks the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to be interpreted as &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;sig_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the signal and it must start with a lowercase letter. It can then contain letters, numbers, and underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;sig_size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the optional array&#x2F;struct size of the signal. See &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sizing&quot;&gt;sizing&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;p&gt;A signal can have an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expression&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; attached to it. This &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expression&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is considered to be the driver of the signal and it can&#x27;t be written elsewhere if provided.&lt;&#x2F;p&gt;
&lt;p&gt;If the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; expression&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; portion is present, it behaves exactly the same as the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; sig_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    sig_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; expression
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be read and written inside an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block. The value that is read is always the last value written.&lt;&#x2F;p&gt;
&lt;p&gt;If a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is read in the same &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block that it is written, then it must be written before it is read.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; my_sig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; 8-bit wide signal
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; ERROR my_sig was read before being written
&lt;&#x2F;span&gt;&lt;span&gt;        my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is often used explicitly internally in an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block as a temporary value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8hff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8h05
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; the addition overflowed!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As mentioned before, inside an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block, the value of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is always the last value written to it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; my_sig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; never reached
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;button_pressed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; only reached if button_pressed is true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Outside the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block that drives the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, only the final value will ever be seen. 
In the previous example, the final line &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;my_sig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; means that anything reading &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;my_sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; outside of that &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block will always see the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dff&quot;&gt;dff&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the building block of any sequential logic. It is the only type to have an internal state.&lt;&#x2F;p&gt;
&lt;p&gt;You can think of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; as a single bit of memory.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; acts a lot like a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;module instance&lt;&#x2F;a&gt; in that it has ports and parameters.&lt;&#x2F;p&gt;
&lt;p&gt;It has three inputs, one output, and one parameter.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input is the data input. This is used to update the value of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input is the clock input. Whenever this transitions from 0 to 1, a rising edge, the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input is saved. &lt;&#x2F;p&gt;
&lt;div class=&quot;callout-box callout-warning&quot; &gt;
    &lt;div class=&quot;callout-icon&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;callout-content&quot;&gt;
        &lt;p&gt;Generally, the &lt;code&gt;.clk&lt;&#x2F;code&gt; of every &lt;code&gt;dff&lt;&#x2F;code&gt; should all connect to the same system clock. 
You shouldn&#x27;t drive this signal with other logic. 
FPGAs have special dedicated clock routing resources to efficiently distribute a clock signal to the entire (or large portions) of the FPGA. 
Messing with this can cause your design to simulate fine but fail in the real world.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.rst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input is the reset input. 
This is used to force the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; into a known state (0 or 1). 
If a reset isn&#x27;t needed, this input can be left unconnected. 
You should only use this when a reset is actually needed as omitting it will reduce the routing complexity of your design.&lt;&#x2F;p&gt;
&lt;p&gt;A complementary &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.arst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input can be used as an asynchronous reset.
This input works the same as the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.rst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input, but it doesn&#x27;t wait for a rising edge of the clock to reset the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.q&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; value.
This is typically not desired and should be used with caution as it may lead to timing issues.&lt;&#x2F;p&gt;
&lt;p&gt;Only &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.rst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; &lt;em&gt;or&lt;&#x2F;em&gt; &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.arst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be used at once.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.q&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; output is the current value of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;INIT&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; parameter is used to specify the value that the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will both initialize and reset to. It has a default value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;FPGAs are fully initialized when programmed regardless if the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; has a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;rst&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; signal or not.&lt;&#x2F;p&gt;
&lt;p&gt;The format to declare a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; looks like the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;span&gt; dff_name dff_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ports_and_params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; optionally marks the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to be interpreted as &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dff_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the dff and it must start with a lowercase letter. It can then contain letters, numbers, and underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dff_size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;  is the optional array&#x2F;struct size of the signal. See &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sizing&quot;&gt;sizing&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;ports_and_params&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; portion is a comma separated list of port and parameter connections. See &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#module-instances&quot;&gt;module instances&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;const&quot;&gt;const&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type provides a way to name constant values. This allows you to set the value in one place but use in in many places. That way if you need to change it later, it is easy.&lt;&#x2F;p&gt;
&lt;p&gt;The form for a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; declaration looks the the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CONST_NAME &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; const_expr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It starts with the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword followed by &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CONST_NAME&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, the name of your constant. The name must start with an uppercase letter and be followed by uppercase setters and underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;UPPER_SNAKE_CASE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The value of the constant is provided by &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;const_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. This can be any &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#expressions&quot;&gt;expression&lt;&#x2F;a&gt; that evaluates to a constant value.&lt;&#x2F;p&gt;
&lt;p&gt;The width and &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;sign&lt;&#x2F;a&gt; of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is inferred from the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;const_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For example, if you need a constant of an 8-bit number you could use the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;MY_CONST &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d120
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The constant, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;MY_CONST&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, would be an array of 8 bits wide with the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;120&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enum&quot;&gt;enum&lt;&#x2F;h2&gt;
&lt;p&gt;An &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; provides a way to group a list of constants whose value  you don&#x27;t explicitly care about.&lt;&#x2F;p&gt;
&lt;p&gt;Declaring one takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;EnumName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It starts with the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword followed by its name, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;EnumName&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. The name must start with an uppercase letter and contain at lease one lowercase letter. It can otherwise contain letters, numbers, and underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;UpperCamelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Following the name is a list of comma separated values. The names of the values follow the same naming convention as &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constants&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To access the values of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; you use the notation &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;EnumName&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is often paired with a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to store the state of a finite-state machine (FSM).&lt;&#x2F;p&gt;
&lt;p&gt;Here is a common example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;IDLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;span&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)](#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;INIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;RUN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span&gt; .clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#built-in&quot;&gt;function&lt;&#x2F;a&gt; can be used on the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to get the minimum number of bits to store a value.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;expressions&quot;&gt;Expressions&lt;&#x2F;h1&gt;
&lt;p&gt;Expressions appear all over Lucid.&lt;&#x2F;p&gt;
&lt;p&gt;An expression is something that can be evaluated to a single value.&lt;&#x2F;p&gt;
&lt;p&gt;The following sections appear in order of precedence. That means that higher up on the list, the earlier the Lucid parser will match that expression.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#multiply-and-divide&quot;&gt;multiply and divide&lt;&#x2F;a&gt; section comes before the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#addition-and-subtract&quot;&gt;add and subtract&lt;&#x2F;a&gt; section. That means for something like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;  the parser will first evaluate the multiplication before the addition.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;value&quot;&gt;Value&lt;&#x2F;h2&gt;
&lt;p&gt;The simplest expression is a value.&lt;&#x2F;p&gt;
&lt;p&gt;This can be a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#literals&quot;&gt;literal value&lt;&#x2F;a&gt;, a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signals&quot;&gt;signal&lt;&#x2F;a&gt;, or a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#const&quot;&gt;constant&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signed&quot;&gt;Signed&lt;&#x2F;h3&gt;
&lt;p&gt;When a value is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, it means that it will be interpreted as a 2&#x27;s complement number and can represent negative and positive numbers instead of simply positive. &lt;&#x2F;p&gt;
&lt;p&gt;An unsigned value can represent values from 0 to 2&lt;sup&gt;b&lt;&#x2F;sup&gt; -1 where b is the number of bits.&lt;&#x2F;p&gt;
&lt;p&gt;A signed value can represent  values from -2&lt;sup&gt;b-1&lt;&#x2F;sup&gt;  to 2&lt;sup&gt;b-1&lt;&#x2F;sup&gt; -1 where b is the number of bits.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword can be applied as a prefix to most &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#types&quot;&gt;types&lt;&#x2F;a&gt; to mark them as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#built-in&quot;&gt;functions&lt;&#x2F;a&gt; &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$signed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be used to explicitly mark an expression as one or the other.&lt;&#x2F;p&gt;
&lt;p&gt;Expression that operate on numbers assume the values are unsigned binary numbers unless all of the arguments are marked as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. In that case, they are all treated as 2&#x27;s complement signed numbers.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s common to see something like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$signed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$signed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to ensure that the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#multiply-and-divide&quot;&gt;multiplication&lt;&#x2F;a&gt; is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;group&quot;&gt;Group&lt;&#x2F;h2&gt;
&lt;p&gt;The group expression takes the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt; expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is an expression.&lt;&#x2F;p&gt;
&lt;p&gt;It is used to force the order expressions are evaluated. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will cause the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to be evaluated before the multiplication.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;concatenation&quot;&gt;Concatenation&lt;&#x2F;h2&gt;
&lt;p&gt;Concatenation provides a way to merge two or more arrays.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;c{&lt;&#x2F;span&gt;&lt;span&gt; expr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; expr2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where all &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are arrays or bits.&lt;&#x2F;p&gt;
&lt;p&gt;If the values passed into it are multi-dimensional arrays, all of their sub-dimensions must match. For example, an array of width &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; could be concatenated with an array of width &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to form an array of width &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The order of concatenation is such that the right most element occupies the least significant spot.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;c{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b1111&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; result is 8b11110000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;duplication&quot;&gt;Duplication&lt;&#x2F;h2&gt;
&lt;p&gt;Duplication provides a way to concatenate a single value many times with itself.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;const_expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;x{&lt;&#x2F;span&gt;&lt;span&gt; expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;const_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a constant expression indicating how many times to duplicate &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be an array (or bit).&lt;&#x2F;p&gt;
&lt;p&gt;Duplication works the same way as &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#concatenation&quot;&gt;concatenation&lt;&#x2F;a&gt;. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;x{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2b11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the same as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;c{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2b11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2b11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2b11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. Both equal &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;6b111111&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is often used to get a value of all &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with some given width.&lt;&#x2F;p&gt;
&lt;p&gt;For example, you could get the max value of a signal with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; bits using &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;PARAM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;x{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;array-builder&quot;&gt;Array Builder&lt;&#x2F;h2&gt;
&lt;p&gt;The array builder provides a way to create an array from any number of identically sized expressions.&lt;&#x2F;p&gt;
&lt;p&gt;The syntax is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; expr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; expr2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where all &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; have the same width.&lt;&#x2F;p&gt;
&lt;p&gt;The order of the array is such that the right most &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is index 0.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2d2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2d1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2d0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; creates a [3][2] array where index [0] == 2d0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;invert&quot;&gt;Invert&lt;&#x2F;h2&gt;
&lt;p&gt;The invert operators allow you to perform a bitwise or logical invert.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Bitwise invert&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Logical invert&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The result of a bitwise invert is the same width as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with every bit inverted (&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; becomes &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; becomes &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The result of a logical invert is a single bit. It is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;negate&quot;&gt;Negate&lt;&#x2F;h2&gt;
&lt;p&gt;The negate operator allows you to negate the 2&#x27;s complement interpretation of an array.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be a 1-D array or bit.  The result is the negative value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. The width of the result is always 1 bit wider than &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to accommodate overflow.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0001&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5b11111&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using this operator does not mark the value to be considered &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multiply-and-divide&quot;&gt;Multiply and Divide&lt;&#x2F;h2&gt;
&lt;p&gt;The multiply and divide operators do what you would expect, they multiply or divide two expressions.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Multiplication&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Division&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The result from each operation is the minimum number of bits to represent the largest possible value.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; used in either must be 1-D arrays or bits.&lt;&#x2F;p&gt;
&lt;p&gt;For the computation to be &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;, both &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be signed. If either is unsigned, the computation will be unsigned.&lt;&#x2F;p&gt;
&lt;div class=&quot;callout-box callout-warning&quot; &gt;
    &lt;div class=&quot;callout-icon&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;callout-content&quot;&gt;
        &lt;p&gt;FPGAs typically have some number of dedicated multipliers that make multiplication pretty fast. &lt;&#x2F;p&gt;
&lt;p&gt;Division can be very costly to perform. However, it is basically free if your denominator is a power of 2.&lt;&#x2F;p&gt;
&lt;p&gt;A simple trick you can often use is to multiply the numerator by something then divide by a power of 2 to approximate the division. For example dividing by 3 can be efficiently approximated with &lt;code&gt;n * 85 &#x2F; 256&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;addition-and-subtract&quot;&gt;Addition and Subtract&lt;&#x2F;h2&gt;
&lt;p&gt;The addition and subtraction operators allow you to add or subtract two expressions.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Addition&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Subtraction&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The result from each operation is the width of the larger &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; plus one bit to account for overflow.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; used in either must be 1-D arrays or bits.&lt;&#x2F;p&gt;
&lt;p&gt;For the computation to be &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;, both &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be signed. If either is unsigned, the computation will be unsigned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shifting&quot;&gt;Shifting&lt;&#x2F;h2&gt;
&lt;p&gt;The shifting operators allow you to shift the bits in a 1-D array or bit left or right.&lt;&#x2F;p&gt;
&lt;p&gt;There are four versions of the shifting operator.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; amount&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Logical left shift&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; amount&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Logical right shift&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; amount&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Arithmetic left shift&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; amount&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Arithmetic right shift&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;amount&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be 1-D arrays or bits.&lt;&#x2F;p&gt;
&lt;p&gt;Logical shifts always use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for the bits shifted in.&lt;&#x2F;p&gt;
&lt;p&gt;Arithmetic right shift will use the sign bit if &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if it is not.&lt;&#x2F;p&gt;
&lt;p&gt;Arithmetic left always uses &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and is functionally identical to logical left.&lt;&#x2F;p&gt;
&lt;p&gt;The result of right shifts have the width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The result of left shifts have the width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; plus the value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;amount&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some examples.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0110 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; 5b01100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0110 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; 5b01100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b1100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; 4b0110
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b1100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; 4b0110
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$signed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b1100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; 4b1110
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;bitwise&quot;&gt;Bitwise&lt;&#x2F;h2&gt;
&lt;p&gt;Bitwise operators allow you to perform the boolean operations &lt;em&gt;and&lt;&#x2F;em&gt;, &lt;em&gt;or&lt;&#x2F;em&gt;, and &lt;em&gt;xor&lt;&#x2F;em&gt; on a bit-by-bit basis of two expressions with matching widths.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;AND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;OR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;XOR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The widths of both &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must match exactly. Otherwise, they can be anything.&lt;&#x2F;p&gt;
&lt;p&gt;The result has the same width as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reduction&quot;&gt;Reduction&lt;&#x2F;h2&gt;
&lt;p&gt;Reduction operators allow you to perform the boolean operations &lt;em&gt;and&lt;&#x2F;em&gt;, &lt;em&gt;or&lt;&#x2F;em&gt;, and &lt;em&gt;xor&lt;&#x2F;em&gt; on all the bits in an expression with all the other bits.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;AND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;OR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;XOR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The result of any reduction operator is a single bit.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; operator is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if every bit in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; operator is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if any bit in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;^&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; operator is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if there are an odd number of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; bits in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparison&quot;&gt;Comparison&lt;&#x2F;h2&gt;
&lt;p&gt;The comparison operators allow you to compare the values of two 1-D arrays or bits.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Less than&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Greater than&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Equality&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Not equal&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Less than or equal&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Greater than or equal&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The result of any comparison is a single bit. The value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; means the comparison was true and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; means false.&lt;&#x2F;p&gt;
&lt;p&gt;For a comparison to be &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt;, both &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; must be signed. If either is unsigned, the comparison will be unsigned.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;logical&quot;&gt;Logical&lt;&#x2F;h2&gt;
&lt;p&gt;Logical operators allow you to perform the boolean operations &lt;em&gt;and&lt;&#x2F;em&gt; and &lt;em&gt;or&lt;&#x2F;em&gt; on two logical values.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Operator&lt;&#x2F;th&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;AND&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;OR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The result from either operator is a single bit.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is considered to be &lt;em&gt;true&lt;&#x2F;em&gt; if it isn&#x27;t &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;em&gt;false&lt;&#x2F;em&gt; only when it equals &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; operator will produce &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if both &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are &lt;em&gt;true&lt;&#x2F;em&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;||&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; operator will produce &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is either &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;em&gt;true&lt;&#x2F;em&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ternary&quot;&gt;Ternary&lt;&#x2F;h2&gt;
&lt;p&gt;The ternary operator allows you select between two identically sized expressions using the value of a third expression.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;selector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; true_expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; false_expr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;selector&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is considered to be &lt;em&gt;true&lt;&#x2F;em&gt; if it isn&#x27;t &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;em&gt;false&lt;&#x2F;em&gt; only when it equals &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The result has the same width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;true_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;false_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, which must match.&lt;&#x2F;p&gt;
&lt;p&gt;When &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;selector&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;em&gt;true&lt;&#x2F;em&gt; the result is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;true_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;false_expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;always-test-block-statements&quot;&gt;Always&#x2F;Test Block Statements&lt;&#x2F;h1&gt;
&lt;p&gt;This section contains the statements that can appear inside &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#always-blocks&quot;&gt;always&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#test-blocks&quot;&gt;test&lt;&#x2F;a&gt; blocks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;assignments&quot;&gt;Assignments&lt;&#x2F;h2&gt;
&lt;p&gt;The most common statement is the assignment statement. These allow you to write a value to a signal.&lt;&#x2F;p&gt;
&lt;p&gt;They take the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;signal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; expression
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;signal&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the writable signal to have the value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expression&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; written to it.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;signal&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; doesn&#x27;t necessarily have to be the entire width of the signal and &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signal-selection&quot;&gt;signal selectors&lt;&#x2F;a&gt; can be used to assign a value to only part of the signal.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; my_sig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    my_sig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8haa
&lt;&#x2F;span&gt;&lt;span&gt;    my_sig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8hbb
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If any portion of a signal is driven inside an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block then all of the signal must be driven somewhere in the block. In the above example, removing either assignment would result in an error since that &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block would have a value for only half of the signal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;if&quot;&gt;if&lt;&#x2F;h2&gt;
&lt;p&gt;An &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; statement allows you to conditionally consider a block of statements.&lt;&#x2F;p&gt;
&lt;p&gt;They take the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    statements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    statements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;em&gt;true&lt;&#x2F;em&gt;, meaning non-zero, then the statements in the first &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; section are considered. If it is &lt;em&gt;false&lt;&#x2F;em&gt;, meaning zero, then the statements in the second &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; section are considered.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;else&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; portion is optional.&lt;&#x2F;p&gt;
&lt;p&gt;The brackets can be omitted if there is only one statement in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;case&quot;&gt;case&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; statement provides a way to cleanly write a group of conditional statements that depend on the value of a single expression.&lt;&#x2F;p&gt;
&lt;p&gt;It takes the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        statements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        statements
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        statements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; expression is evaluated and compared against the provided values (&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE_1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;VALUE_2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, etc) inside the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;p&gt;If one of the values match &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;condition&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, then its corresponding group of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are considered. If none of the values match, an optional &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;default&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; branch&#x27;s &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are considered.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike some programming languages, there is no &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;break&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword and the branches don&#x27;t fall through to the next condition without one.&lt;&#x2F;p&gt;
&lt;p&gt;You often see these used in conjunction with &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#enum&quot;&gt;enums&lt;&#x2F;a&gt; where the condition is a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#dff&quot;&gt;dff&lt;&#x2F;a&gt; that holds the current state and each branch is one of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&#x27;s values.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;repeat&quot;&gt;repeat&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; statement allows for a block of statements to be considered multiple times.&lt;&#x2F;p&gt;
&lt;p&gt;They take the following form.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    statements
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a constant expression indicating how many times the block of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;statements&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; should be considered.&lt;&#x2F;p&gt;
&lt;p&gt;The arguments &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are optional and have default values of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; respectively.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; argument is an optional variable name that can be used inside the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block. It will start with the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and increment by &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; each iteration of the loop to a final value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;* (&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. It must start with a lowercase letter and can contain letters, numbers, and underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is omitted, then only &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; should be provided making it take the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; value can be an expression depending on outer loops &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;var&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; in the case of nested &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;(i, j) = (%d, %d)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would print the following (in a simulation).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;(i, j) = (0, 0)
&lt;&#x2F;span&gt;&lt;span&gt;(i, j) = (1, 0)
&lt;&#x2F;span&gt;&lt;span&gt;(i, j) = (1, 1)
&lt;&#x2F;span&gt;&lt;span&gt;(i, j) = (2, 0)
&lt;&#x2F;span&gt;&lt;span&gt;(i, j) = (2, 1)
&lt;&#x2F;span&gt;&lt;span&gt;(i, j) = (2, 2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;callout-box callout-info&quot; &gt;
    &lt;div class=&quot;callout-icon&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;callout-content&quot;&gt;
        &lt;p&gt;While it may seem like &lt;code&gt;repeat&lt;&#x2F;code&gt; works like &lt;code&gt;for&lt;&#x2F;code&gt; loops in many programming languages, it is important to remember that &lt;code&gt;always&lt;&#x2F;code&gt; blocks are only a convenient abstraction for describing a circuit&#x27;s behavior. When your design is synthesized it must be converted to hardware.&lt;&#x2F;p&gt;
&lt;p&gt;This means that all loops must be &lt;em&gt;unrolled&lt;&#x2F;em&gt;. A &lt;code&gt;repeat&lt;&#x2F;code&gt; block is identical to simply copy-pasting the contents over and over and replacing the loop variable with a different value for each one.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h2 id=&quot;function-call&quot;&gt;Function call&lt;&#x2F;h2&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#test-blocks&quot;&gt;test blocks&lt;&#x2F;a&gt;, you can call &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#simulation-only&quot;&gt;simulation functions&lt;&#x2F;a&gt; as a statement.&lt;&#x2F;p&gt;
&lt;p&gt;These are used to control the simulator or produce output like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; used in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#repeat&quot;&gt;repeat&lt;&#x2F;a&gt; example.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;literals&quot;&gt;Literals&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;numbers&quot;&gt;Numbers&lt;&#x2F;h2&gt;
&lt;p&gt;Numbers can be represented in decimal, binary, or hexadecimal. In each case you can choose to explicitly specify the number of bits.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format&lt;&#x2F;th&gt;&lt;th&gt;Radix&lt;&#x2F;th&gt;&lt;th&gt;Width&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0123456789&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;10 (decimal)&lt;&#x2F;td&gt;&lt;td&gt;Minimum bits required&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;d0123456789&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;10 (decimal)&lt;&#x2F;td&gt;&lt;td&gt;Minimum bits required&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b01xz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;2 (binary)&lt;&#x2F;td&gt;&lt;td&gt;Number of digits&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;h0123456789ABCDEFxz&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;16 (hex)&lt;&#x2F;td&gt;&lt;td&gt;Number of digits * 4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Decimal numbers can be written as a stand-alone number. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;12&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will have the expected value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;12&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. They can also be prefixed with a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to specify that it is a decimal number like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;d12&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. In both of these cases, the value will have the minimum number of bits required, 4.&lt;&#x2F;p&gt;
&lt;p&gt;Binary numbers are written with the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;b&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; prefix. After that, they can have the digits &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Hex numbers are written with the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;h&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; prefix. After that, they can have the digits &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; through &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;9&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;A&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; through &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;F&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; means either &lt;em&gt;don&#x27;t care&lt;&#x2F;em&gt; or &lt;em&gt;unknown&lt;&#x2F;em&gt; depending on the context.&lt;&#x2F;p&gt;
&lt;p&gt;It is impossible for hardware to realize the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; so outside of simulations these are actually &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. You can assign something &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if you don&#x27;t care what the value is and this will give the tools the freedom to choose whatever value is most efficient.&lt;&#x2F;p&gt;
&lt;p&gt;The value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; means &lt;em&gt;high-impedance&lt;&#x2F;em&gt; and is covered in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#ports&quot;&gt;ports&lt;&#x2F;a&gt; section.&lt;&#x2F;p&gt;
&lt;p&gt;FPGAs don&#x27;t have the hardware internally to realize &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; values so they can only be used on top-level &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#output&quot;&gt;outputs&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#inout&quot;&gt;inouts&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To explicitly specify the width of a number, you add the number of bits before the radix prefix.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d10&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will have the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;10&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and be 8 bits wide.&lt;&#x2F;p&gt;
&lt;p&gt;If the explicit width is wider than the minimum required width, the value is padded with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; unless the most-significant (left-most) digit is either &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. In that case, it will be padded with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; respectively.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;12hx0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; has the value &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;12bxxxxxxxx0000&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If the explicit width is less than the minimum required width, the value will be truncated and a warning will be shown.&lt;&#x2F;p&gt;
&lt;p&gt;Underscores can be added anywhere in the value portion of a number to help with readability.
For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;100_000_000&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8b1010_1100&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;arrays-1&quot;&gt;Arrays&lt;&#x2F;h2&gt;
&lt;p&gt;Literal arrays can be constructed using other literals and the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#array-builder&quot;&gt;array builder&lt;&#x2F;a&gt; expression.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of an array of 4, 8 bit values.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;strings&quot;&gt;Strings&lt;&#x2F;h2&gt;
&lt;p&gt;Strings are just an easy way of creating an array of 8 bit values that correspond to text.&lt;&#x2F;p&gt;
&lt;p&gt;They take the form of text enclosed by quotation marks like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;this example&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The right-most character is index 0 in the resulting array.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;Hi&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8h48&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8h69&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; (&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;h48&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the code for &lt;em&gt;H&lt;&#x2F;em&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;h69&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is &lt;em&gt;i&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;You will often see strings used in conjunction with &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#built-in&quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$reverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to make index 0 be the left-most letter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structs&quot;&gt;Structs&lt;&#x2F;h2&gt;
&lt;p&gt;Struct types are covered in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#struct&quot;&gt;struct section&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To create a literal of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, you use the following syntax.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;.element_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;const_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span&gt; ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a previously defined &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;p&gt;The following comma separated list must contain every element in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;element_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of element in the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;struct_type&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;const_value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the constant value to assign to the element.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;],&lt;&#x2F;span&gt;&lt;span&gt; blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;ALCHITRY_GOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;.red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;250&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span&gt; .green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;172&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;),&lt;&#x2F;span&gt;&lt;span&gt; .blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;functions&quot;&gt;Functions&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;built-in&quot;&gt;Built-in&lt;&#x2F;h2&gt;
&lt;p&gt;In the table below, the argument type of &lt;em&gt;Value&lt;&#x2F;em&gt; means a 1-D array or bit. In other words, something that can represent a number.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Argument Type&lt;&#x2F;th&gt;&lt;th&gt;Purpose&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; dim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is an array and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dim&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a constant value&lt;&#x2F;td&gt;&lt;td&gt;Provides the width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; on dimension &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dim&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a 1-D array or bit, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dim&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is optional and assumed to be &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a multi-dimensional array, then &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dim&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is required. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4b0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8b0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is equal to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$signed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Value&lt;&#x2F;td&gt;&lt;td&gt;Marks the value to be interpreted as signed without changing the underlying bits.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Value&lt;&#x2F;td&gt;&lt;td&gt;Marks the value to be interpreted as unsigned without changing the underlying bits.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$clog2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Constant value&lt;&#x2F;td&gt;&lt;td&gt;Calculates ceiling log base 2 of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$cdiv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;numer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; denom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Constant value&lt;&#x2F;td&gt;&lt;td&gt;Calculates the ceiling of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;numer&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; &#x2F; &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;denom&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$pow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; expo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Constant values&lt;&#x2F;td&gt;&lt;td&gt;Calculates &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to the power of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expo&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$reverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Constant array&lt;&#x2F;td&gt;&lt;td&gt;Reverses the indices of the outer most dimension of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$flatten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Anything&lt;&#x2F;td&gt;&lt;td&gt;Returns a 1-D array of all the bits in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. Arrays are concatenated in order and structs are in the order their elements were declared.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; dims...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a value and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dims&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are constant values&lt;&#x2F;td&gt;&lt;td&gt;Converts a 1-D array into a multi-dimensional array based on the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dims&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; passed in. Each &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dim&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; corresponds to how many times it should be split. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b111000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will split it into 2 becoming &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b111&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. More than one &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dim&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be supplied to build more dimensions. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b11001001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; becomes &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}, {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;b01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a value and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;size&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a constant values&lt;&#x2F;td&gt;&lt;td&gt;Resizes a value either smaller or wider. If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is signed, it will be sign extended.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$fixed_point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; fractional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a real number, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;fractional&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are  constant values&lt;&#x2F;td&gt;&lt;td&gt;Calculates the nearest fixed-point representation of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; using a total width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;fractional&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; fractional bits. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$fixed_point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b262cb;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; produces &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d50&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$c_fixed_point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; fractional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a real number, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;fractional&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are  constant values&lt;&#x2F;td&gt;&lt;td&gt;Calculates the smallest fixed-point representation of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;  that is still larger than it using a total width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;fractional&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; fractional bits. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$c_fixed_point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b262cb;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; produces &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d51&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$f_fixed_point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; fractional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a real number, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;fractional&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are  constant values&lt;&#x2F;td&gt;&lt;td&gt;Calculates the largest fixed-point representation of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;real&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;  that is still smaller than it using a total width of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;width&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;fractional&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; fractional bits. For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$f_fixed_point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b262cb;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; produces &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8d50&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$is_sim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;Evaluates to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1b1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; during interactive simulations and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1b0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;simulation-only&quot;&gt;Simulation Only&lt;&#x2F;h3&gt;
&lt;p&gt;These functions are only available during simulations. In other words, inside &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#test-blocks&quot;&gt;test blocks&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#user-created&quot;&gt;test functions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th&gt;Argument Type&lt;&#x2F;th&gt;&lt;th&gt;Purpose&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;Propagates all signal changes and captures the state.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$silent_tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;Propagates all signal changes.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Any expression, typically a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#comparison&quot;&gt;comparison&lt;&#x2F;a&gt;.&lt;&#x2F;td&gt;&lt;td&gt;Checks that &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is non-zero (true). If it is zero the simulation is halted and an error is printed indicating the failed assert.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Any expression&lt;&#x2F;td&gt;&lt;td&gt;Prints the value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. If &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#strings&quot;&gt;string literal&lt;&#x2F;a&gt;, it prints the string. Otherwise, it prints &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;expr&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the text and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the actual value.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;format&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; exprs...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;format&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#strings&quot;&gt;string literal&lt;&#x2F;a&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;exprs&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a variable number of expressions depending on the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;format&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Prints the string &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;format&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with the values of the provided &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;exprs&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; replaced where applicable. Valid format flags are &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;%d&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for decimal, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;%h&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for hex, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;%b&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for binary, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;%nf&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for fractional where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;n&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the number of fractional bits.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;user-created&quot;&gt;User Created&lt;&#x2F;h2&gt;
&lt;p&gt;Inside &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#testbenches&quot;&gt;testbenches&lt;&#x2F;a&gt;, you can create your own functions using the following syntax.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; function_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;argument_list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    function_body
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;function_name&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the name of the function. It must start with a lowercase letter and be followed by letters, numbers, and underscores. By convention, it is &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;argument_list&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is an optional list of arguments. They act the same as read-only &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#sig&quot;&gt;signals&lt;&#x2F;a&gt; and have a width of 1 bit if a width isn&#x27;t provided. They may also be marked as &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;#signed&quot;&gt;signed&lt;&#x2F;a&gt; using the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0abfbf;&quot;&gt;signed&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; keyword.&lt;&#x2F;p&gt;
&lt;p&gt;To call a function, you use the syntax &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$function_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; ...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example function with an argument.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; tick_clock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This could be called using something like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick_clock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2.0.24 - Negative Indices</title>
        <published>2025-01-24T00:00:00+00:00</published>
        <updated>2025-01-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-0-24/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-0-24/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;alchitry-labs&#x2F;&quot;&gt;Alchitry Labs V2.0.24-BETA&lt;&#x2F;a&gt; is now out bringing many updates from the last blog post on 2.0.21.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2.0.21 - Alchitry Constraints Updated</title>
        <published>2024-12-26T00:00:00+00:00</published>
        <updated>2024-12-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-0-21-acf/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-0-21-acf/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;alchitry-labs&#x2F;&quot;&gt;Alchitry Labs V2.0.21-BETA&lt;&#x2F;a&gt; just dropped with support for the new &lt;a href=&quot;https:&#x2F;&#x2F;shop.alchitry.com&#x2F;collections&#x2F;all&quot;&gt;Alchitry V2 boards&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To properly support the new boards, the format for Alchitry Constraint Files (ACF) were updated. </summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry V2 - Production Begins</title>
        <published>2024-12-09T00:00:00+00:00</published>
        <updated>2024-12-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-v2-design-update/"/>
        <id>https://alchitry.com/news/alchitry-v2-design-update/</id>
        
        <summary type="html">&lt;p&gt;It has been a busy couple of months and things are starting to come together!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry V2 - All New Boards</title>
        <published>2024-11-13T00:00:00+00:00</published>
        <updated>2024-11-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-v2/"/>
        <id>https://alchitry.com/news/alchitry-v2/</id>
        
        <summary type="html">&lt;p&gt;It&#x27;s official, all the boards are being redesigned into a new form factor.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Platinum and Board Rework</title>
        <published>2024-10-09T00:00:00+00:00</published>
        <updated>2024-10-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-platinum-v2/"/>
        <id>https://alchitry.com/news/alchitry-platinum-v2/</id>
        
        <summary type="html">&lt;p&gt;The Alchitry Platinum (Pt), is in the early stages of design. 
This version will most likely be based on the XC7A100T-2FGG484C FPGA.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2 - snake_case</title>
        <published>2024-09-23T00:00:00+00:00</published>
        <updated>2024-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-snake-case/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-snake-case/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-snake-case/">&lt;p&gt;Alchitry Labs V2.0.17 just release and is a major shift from previous releases.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;snake-case&quot;&gt;snake_case&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#snake-case&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;When starting on Lucid V2, I had originally though to make &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;camelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; the default style for names.
However, I think this was a poor choice for a few reasons and decided to switch to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest reason to use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is because this is what is used by Verilog.
All the Xilinx tools use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; so when mixing Lucid and Verilog it is nicer to have a consistent style.&lt;&#x2F;p&gt;
&lt;p&gt;Lucid V1 was also mostly documented in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; but the styling wasn&#x27;t super consistent.
This is what made me think to switch in the first place.
I generally prefer the aesthetics of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;camelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, but writing &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;rst_n&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; as &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;rstN&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is just awful.&lt;&#x2F;p&gt;
&lt;p&gt;Adding a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;_n&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;_p&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; suffix to names is common with differential signals (as seen in the DDR3 MIG module).
Single letters are hard to discern in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;camelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and are much better in &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-changed&quot;&gt;What Changed&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#what-changed&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;In V2.0.17, all the components and example projects switched to use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for names.&lt;&#x2F;p&gt;
&lt;p&gt;Functions names also changed so &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$silentTick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; became &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$silent_tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The keyword &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;testBench&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; also changed to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;testbench&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.
It seems a bit inconsistent if the word testbench is two words or one, but it seems like it is more often seen as one.
I also thought using &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;test_bench&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; as a keyword felt weird.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;auto-migration&quot;&gt;Auto-migration&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#auto-migration&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;If you open an older project with Alchitry Labs V2.0.17 or newer, it will automatically migrate your code.
This means files will be renamed and all &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;camelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will be replaced with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Also, in the Io constraints and examples &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;ioSel&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; became &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;io_select&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;ioSeg&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; became &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;io_segment&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for clarity.
The migration will change these names as well.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m sorry for any inconvenience this causes to anyone already using Alchitry Labs V2, but I believe in the long run this is the better choice.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll be updating the tutorials and documentation today to reflect these changes.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>DDR3 Memory</title>
        <published>2024-09-23T00:00:00+00:00</published>
        <updated>2024-09-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/ddr3-memory/"/>
        <id>https://alchitry.com/tutorials/ddr3-memory/</id>
        
        <summary type="html">&lt;p&gt;In this tutorial we are going to set up an interface to the DDR3 memory with the FPGA on the Alchitry Au&#x2F;Au+.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Hello YOUR_NAME_HERE</title>
        <published>2024-09-19T00:00:00+00:00</published>
        <updated>2024-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/hello-your-name-here/"/>
        <id>https://alchitry.com/tutorials/hello-your-name-here/</id>
        
        <summary type="html">&lt;p&gt;In this tutorial we will be personalizing the greeter so that it first asks for your name and then prints &amp;quot;Hello NAME&amp;quot; where NAME is the name you entered.
To do this we will need some form of memory and in this case we will use a single port RAM.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>ROMs and FSMs</title>
        <published>2024-09-19T00:00:00+00:00</published>
        <updated>2024-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/roms-and-fsms/"/>
        <id>https://alchitry.com/tutorials/roms-and-fsms/</id>
        
        <summary type="html">&lt;p&gt;In this tutorial we will create a project that will send &amp;quot;Hello World!&amp;quot; over the USB (serial) port when the letter &amp;quot;h&amp;quot; is received. 
This will help teach you how to use finite state machines (FSM).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Serial Interface</title>
        <published>2024-09-19T00:00:00+00:00</published>
        <updated>2024-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/serial-interface/"/>
        <id>https://alchitry.com/tutorials/serial-interface/</id>
        
        <summary type="html">&lt;p&gt;In this tutorial we will use the USB port and create a project that will echo back all the data sent to the Alchitry board.
This will teach you how to use the &lt;em&gt;Component Library&lt;&#x2F;em&gt; in your projects.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Io Element</title>
        <published>2024-09-18T00:00:00+00:00</published>
        <updated>2024-09-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/io-element/"/>
        <id>https://alchitry.com/tutorials/io-element/</id>
        
        <summary type="html">&lt;p&gt;This tutorial will introduce the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;boards&#x2F;io&#x2F;&quot;&gt;Io Element&lt;&#x2F;a&gt; and walk through some basic examples to get your feet wet.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t own an Io Element, you can still follow along using the simulator.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Synchronous Logic</title>
        <published>2024-09-17T00:00:00+00:00</published>
        <updated>2024-09-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/synchronous-logic/"/>
        <id>https://alchitry.com/tutorials/synchronous-logic/</id>
        
        <summary type="html">&lt;p&gt;In this tutorial you will be introduced to the &lt;em&gt;D flip-flop&lt;&#x2F;em&gt; and how you can use these to make an LED blink.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2 - Now in Beta!</title>
        <published>2024-09-16T00:00:00+00:00</published>
        <updated>2024-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-beta/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-beta/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-beta/">&lt;p&gt;Alchitry Labs V2.0.14 is now released and with it the status of the project changes from preview to beta!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs-2.0.14-beta.png&quot; alt=&quot;Alchitry Labs V2.0.14 Beta&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;download it here&lt;&#x2F;a&gt; and help out by reporting any issues you encounter to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;issues&quot;&gt;GitHub issues page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-new&quot;&gt;What&#x27;s New&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#what-s-new&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Before getting into the technical details of V2, lets look at the fun stuff, what&#x27;s new.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing you&#x27;re likely to notice is the UI has been revamped. 
It is based on a modern UI toolkit that allows for easy animations, Sublime-style scroll bars, interactive virtual boards, and drag-and-drop window splitting.&lt;&#x2F;p&gt;
&lt;p&gt;Alchitry Labs V2 supports the new &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;&quot;&gt;Lucid V2&lt;&#x2F;a&gt;.
See the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;news&#x2F;lucid-1-vs-2&#x2F;&quot;&gt;V1 vs V2 blog post&lt;&#x2F;a&gt; for a summary of what has changed. &lt;&#x2F;p&gt;
&lt;p&gt;Support for Lucid V2 is so much deeper than Lucid V1 ever was. 
Alchitry Labs now creates a full model of your Lucid code.
This causes plenty of errors that would just fly under the radar in V1 to be caught and reported in real-time.
It also allows for your project to be simulated.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;simulations&quot;&gt;Simulations&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#simulations&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;By clicking the little bug icon, you can launch the simulator.
It currently supports the base board (Au, Au+, or Cu) as well as the Io.&lt;&#x2F;p&gt;
&lt;p&gt;The simulator is an interactive virtual board running your design.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs-2.0.8-preview.gif&quot; alt=&quot;Alchitry Labs 2.0.8&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can toggle the DIP switches or press the buttons by clicking on them.
PWM effects are also simulated on LEDs allowing for fade effects or multiplexing of the Io element&#x27;s 7-segment displays.&lt;&#x2F;p&gt;
&lt;p&gt;The only real catch is the simulator can&#x27;t run as fast as dedicated hardware.
By default, it runs at 1KHz which is a fair bit slower than the 100MHz clock on the real board.
However, many educational designs don&#x27;t need a fast clock.
Hopefully, the Io simulator will make learning the basics that much easier.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-benches&quot;&gt;Test Benches&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-benches&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Alchitry Labs V2 supports test benches.
These allow you test out Lucid modules to make sure they are doing what you expect them to do.&lt;&#x2F;p&gt;
&lt;p&gt;In a test block, you can manipulate the values feeding into a module then check their outputs.
In the event that things didn&#x27;t go according to plan, the values of every signal at every step of the simulation are saved, and you can view them after it finishes.
See the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;news&#x2F;lucid-v2-update-2&#x2F;&quot;&gt;test bench blog post&lt;&#x2F;a&gt; for more details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;open-source-tools&quot;&gt;Open Source Tools&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#open-source-tools&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Using the open source tools (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YosysHQ&#x2F;yosys&quot;&gt;yosys&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YosysHQ&#x2F;nextpnr&quot;&gt;nextpnr&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YosysHQ&#x2F;icestorm&quot;&gt;icestorm&lt;&#x2F;a&gt;) for the Cu has never been easier.
Alchitry Labs V1 had support for some of the older open source tools, but you had to install them yourself.
V2 now comes with the open source tools so you can use them out of the box for the Cu.&lt;&#x2F;p&gt;
&lt;p&gt;This also means that you can now build projects for the Cu natively on a Mac!&lt;&#x2F;p&gt;
&lt;p&gt;Currently, the open source tools don&#x27;t support the Artix 7 used on the Au, but they are in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gatecat&#x2F;nextpnr-xilinx&#x2F;&quot;&gt;development&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;all-the-small-things&quot;&gt;All The Small Things&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#all-the-small-things&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Alchitry Labs V2 has been in the works for over two years now.
There are way too many things to list here that has changed.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the important changes are under the hood and will allow future improvements to continue in a sustainable way.&lt;&#x2F;p&gt;
&lt;p&gt;I hope you&#x27;ll head over to the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;download page&lt;&#x2F;a&gt; and check it out.
You can leave any general feedback on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;discussions&quot;&gt;discussions page&lt;&#x2F;a&gt; and report any issues to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;issues&quot;&gt;issues page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-v2&quot;&gt;Why V2&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#why-v2&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Alchitry Labs was originally the Mojo IDE. The goal of the Mojo IDE was to both create an IDE with creature comforts like real-time syntax error checking and support a new HDL, Lucid, to make programming FPGAs more accessible.&lt;&#x2F;p&gt;
&lt;p&gt;The initial Lucid support was very basic. The IDE would show any syntax errors, but nothing more in depth than that.&lt;&#x2F;p&gt;
&lt;p&gt;The focus was on creating a Lucid -&amp;gt; Verilog translator so you could even use it. 
Only later, more indepth parsing was added.&lt;&#x2F;p&gt;
&lt;p&gt;At first, only the widths of signals and expressions were checked. 
It was able to warn you if an assignment would truncate your value.&lt;&#x2F;p&gt;
&lt;p&gt;Over time, the types of errors being checked continued to grow. 
Eventually, it was doing full parsing of constant values.&lt;&#x2F;p&gt;
&lt;p&gt;This lead to the idea that the parser could be used to simulate Lucid. 
All you have to do is run it over and over right... right?
Turned out to be a tad more complicated.&lt;&#x2F;p&gt;
&lt;p&gt;When looking into how to actually turn the parser into a simulator, it was clear the pile of tech debt had grown too much to ignore any longer. 
I started writing the Mojo IDE a decade ago during my junior year of college. 
It was by far the biggest piece of software I had written and I made plenty of questionable design choices.&lt;&#x2F;p&gt;
&lt;p&gt;To make any meaningful improvements, a full rewrite looked like the only practical way forward.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;new-tools&quot;&gt;New Tools&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#new-tools&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Since things were starting over, I was able to overhaul the GUI. 
V1 was based on the aging SWT. 
V2 is based on Compose.
While I appreciated that SWT kept the look and feel of the native desktop environment, Compose is enormously more flexible.
The new interactive virtual boards would have been incredibly difficult to pull off with SWT. &lt;&#x2F;p&gt;
&lt;p&gt;The other major shift is that V2 is pure Kotlin. 
I was notoriously bad at checking for null values in the original Java based parser causing a vast number of bugs that would simply crash the IDE.
Kotlin&#x27;s built-in null safety has been incredibly helpful.&lt;&#x2F;p&gt;
&lt;p&gt;Kotlin&#x27;s other features, like coroutines, have also been instrumental for building out the simulator in an efficient manner.&lt;&#x2F;p&gt;
&lt;p&gt;The last fundamental change was in the build system.
Before V2, building distributables was a nightmare.
It was a multistep error-prone process including firing up a Windows VM to build the Windows executable and installer.
This inherently lead to infrequent updates since they were such a pain.&lt;&#x2F;p&gt;
&lt;p&gt;The new system relies on &lt;a href=&quot;https:&#x2F;&#x2F;conveyor.hydraulic.dev&#x2F;&quot;&gt;Hydraulic Conveyor&lt;&#x2F;a&gt;.
This software is awesome.
It lets me build and publish distributables for Windows, Linux, and Mac, with one click from Linux.
It is also free for open source software.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-next&quot;&gt;What&#x27;s Next&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#what-s-next&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;With the beta released, the next step is to update the tutorials.
I&#x27;ll be working on the first few this week.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back at the V1 tutorials, I&#x27;m a bit disappointed I never got into the depth I should have.
I&#x27;m planning to rectify that with V2.&lt;&#x2F;p&gt;
&lt;p&gt;These will go hand in hand with work on the IDE.
The best place to see what&#x27;s coming is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;issues&quot;&gt;issues page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Your First FPGA Project</title>
        <published>2024-09-16T00:00:00+00:00</published>
        <updated>2024-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/tutorials/your-first-fpga-project/"/>
        <id>https://alchitry.com/tutorials/your-first-fpga-project/</id>
        
        <summary type="html">&lt;p&gt;This tutorial will walk you through creating your first project in Alchitry Labs and making the onboard LED light up when you press the
reset button.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2.0.13 - Verilog Interoperability</title>
        <published>2024-08-28T00:00:00+00:00</published>
        <updated>2024-08-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-0-13-verilog/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-0-13-verilog/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-0-13-verilog/">&lt;p&gt;Today version &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;releases&#x2F;tag&#x2F;2.0.13&quot;&gt;V2.0.13&lt;&#x2F;a&gt; of Alchitry Labs was released!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;verilog-interoperability&quot;&gt;Verilog Interoperability&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#verilog-interoperability&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;A ton has changed&#x2F;been added since the last post about &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;news&#x2F;alchitry-labs-v2-0-8&#x2F;&quot;&gt;V2.0.8&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The biggest feature, by far, is the addition of Verilog interoperability.&lt;&#x2F;p&gt;
&lt;p&gt;You can now add Verilog modules and instantiate them from Lucid. This was an important missing feature to allow for vendor specific things to be easily integrated into Lucid projects.&lt;&#x2F;p&gt;
&lt;p&gt;For example, in a Verilog module, you can instantiate the primitives outlined in &lt;a href=&quot;https:&#x2F;&#x2F;docs.amd.com&#x2F;viewer&#x2F;book-attachment&#x2F;Lz7t3FLJuzYlv9pBdksO6Q&#x2F;ob7lIrXtxRMJLY4I6UEprg&quot;&gt;UG953&lt;&#x2F;a&gt; for the Au&#x2F;Au+. This is important for stuff like the upcoming &lt;em&gt;Alchitry Hd&lt;&#x2F;em&gt; that utilizes the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;OSERDESE2&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; primitive to output HDMI video data.&lt;&#x2F;p&gt;
&lt;p&gt;While the entire Verilog module is checked for syntax error in the editor, Alchitry Labs doesn&#x27;t look at the content inside the Verilog modules. It only ever looks at the module interface (parameters and ports).&lt;&#x2F;p&gt;
&lt;p&gt;This means that Verilog inside Alchitry Labs has a lot less guards in place and should only really be used as glue to existing Verilog.&lt;&#x2F;p&gt;
&lt;p&gt;It also has the major downside that Verilog modules are essentially ignored during simulations.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;string-indexing&quot;&gt;String Indexing&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#string-indexing&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;To make Verilog smoothly interoperate with Lucid, the indexing for strings was reverted to how it worked in Lucid V1. That is, the right-most letter is index 0 instead of the left-most.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the string &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;Hello&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; in Lucid is represented as an &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; array where index &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; points to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;o&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. In V2.0.12 and earlier, index &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; pointed to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;H&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can use the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$reverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function to restore the indexing to the previous behavior.&lt;&#x2F;p&gt;
&lt;p&gt;Verilog uses the right-side indexing so it now matches. This was important for passing strings as parameters which is often done with Xilinx&#x27;s primitives. Before this change, the Verilog side would see the strings as reversed causing them not to be recognized.&lt;&#x2F;p&gt;
&lt;p&gt;While having the right side of string be index 0 seems a little strange, it does nicely match how arrays and everything else are indexed. Now, the right side is always index 0.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;build-flow&quot;&gt;Build Flow&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#build-flow&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;The way projects are built underwent a huge change. Previously, when building a project, the tools would start with the top-level module and build out a tree of all instantiated modules underneath it. This has the huge benefit of knowing what all the parameter values are as they &lt;strong&gt;must&lt;&#x2F;strong&gt; be specified at this point.&lt;&#x2F;p&gt;
&lt;p&gt;The big downside of this, is that a separate Verilog translation needs to happen for every different combination of parameters on a module. For example, if you used a counter module and set it&#x27;s parameter &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; but in another location used the counter with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; then two separate Verilog modules would have been generated.&lt;&#x2F;p&gt;
&lt;p&gt;This was a fairly small downside to making all constant values calculable when converting to Verilog. However, it has the big downside of making it impossible to call a Lucid module directly from Verilog.&lt;&#x2F;p&gt;
&lt;p&gt;In the new version, each module is translated to Verilog in isolation properly using parameters. &lt;&#x2F;p&gt;
&lt;p&gt;This makes it possible for Lucid modules to be used inside Verilog modules.&lt;&#x2F;p&gt;
&lt;p&gt;It also likely helps the build tools to do things more optimally.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;&quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$isSim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;A new function, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$isSim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, was introduced. This function evaluates to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1b1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; if running in an interactive simulation and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1b0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;This is useful for dealing with the &lt;em&gt;much&lt;&#x2F;em&gt; slower clock speeds when running an interactive simulation (usually around 1,000 Hz instead of 100,000,000 Hz).&lt;&#x2F;p&gt;
&lt;p&gt;For example, providing a different &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DIV&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; parameter value to a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;multiSevenSeg&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; module with the following makes the display work well in simulation and builds.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;multiSevenSeg seg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DIV&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$isSim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;() ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$isSim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; evaluates to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1b0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; during test benches.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;beta-release&quot;&gt;Beta Release&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#beta-release&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Things are getting pretty close to the release of V2.1.0 which will mark the first beta release.&lt;&#x2F;p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;issues?q=is%3Aopen+is%3Aissue+milestone%3A%222.1.0+Beta+Release%22&quot;&gt;V2.1.0 Milestone on GitHub&lt;&#x2F;a&gt; to track the remaining features to be added before the release.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re using the preview builds and run into any issues, be sure to report them on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;issues&quot;&gt;GitHub&lt;&#x2F;a&gt; so I can get them fixed ASAP!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2.0.8</title>
        <published>2024-05-14T00:00:00+00:00</published>
        <updated>2024-05-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-0-8/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-0-8/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-0-8/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs-2.0.8-preview.gif&quot; alt=&quot;Alchitry Labs 2.0.8&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yesterday version 2.0.8 of &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;alchitry-labs&#x2F;&quot;&gt;Alchitry Labs&lt;&#x2F;a&gt; was released.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s been a while since 2.0.7 was released so I&#x27;ll do my best not to miss any import updates.&lt;&#x2F;p&gt;
&lt;p&gt;First off, there is now an official &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;lucid-reference&#x2F;&quot;&gt;Lucid V2 Reference&lt;&#x2F;a&gt;. This page should be able to answer any questions you have about the details of Lucid V2.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;known-values&quot;&gt;Known Values&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#known-values&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;A major refactoring was done for determining if a value is &lt;em&gt;constant&lt;&#x2F;em&gt;. The old code would keep track of if a value was constant or not with a simple boolean.&lt;&#x2F;p&gt;
&lt;p&gt;This became a problem when working with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks. The issue is that the loop variable isn&#x27;t constant but it is known during synthesis and should be able to be used like a constant.&lt;&#x2F;p&gt;
&lt;p&gt;To fix this, the state of an expression is now marked as &lt;em&gt;dynamic&lt;&#x2F;em&gt;, &lt;em&gt;known&lt;&#x2F;em&gt;, or &lt;em&gt;constant&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An important example of this is in the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;binToDec&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; component that uses the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$pow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function with a loop variable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; scale&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$pow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; get the scale for the digit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is different for each loop iteration but can be replaced with a constant during synthesis.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$pow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function accepts arguments that are &lt;em&gt;known&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;updated-repeat-block&quot;&gt;Updated Repeat Block&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#updated-repeat-block&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block has been modified a bit.&lt;&#x2F;p&gt;
&lt;p&gt;The old syntax was &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; was the number of times to loop and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; was the optional loop variable that would be between &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The repeat block can now take the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the number of loops and there is no loop variable (like before). However, it can also take the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are as before (but switched positions). The parameters &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are optional and specify the starting value and amount to increment by each loop.&lt;&#x2F;p&gt;
&lt;p&gt;If omitted they default to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this is a breaking change as the form &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is now &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;component-library&quot;&gt;Component Library&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#component-library&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;The component library has been added. It can be accessed by the three box icon in the main toolbar.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;component-library.png&quot; alt=&quot;Component Library&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Components are now designated in the project tree buy the same three box icon.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;example-projects&quot;&gt;Example Projects&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#example-projects&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;In addition to the components being added, the project templates have been added as well.&lt;&#x2F;p&gt;
&lt;p&gt;This means you can easily start a project for the Io with the Io Base or Io Demo templates.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;toolchain-settings&quot;&gt;Toolchain Settings&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#toolchain-settings&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;A settings menu was added under the main drop down that is accessed by click on the Alchitry logo.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, it is populated with the toolchain settings. These let you select the locations for your Vivado and iCEcube2 installs.&lt;&#x2F;p&gt;
&lt;p&gt;There is also an option to toggle between the built in Yosys toolchain or iCEcube2 when working with the Cu.&lt;&#x2F;p&gt;
&lt;p&gt;The Yosys toolchain was updated in the Linux build to not require that a specific version of Python be installed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>iCEcube2 No Longer Free</title>
        <published>2024-04-17T00:00:00+00:00</published>
        <updated>2024-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/icecube2-no-longer-free/"/>
        <id>https://alchitry.com/news/icecube2-no-longer-free/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/icecube2-no-longer-free/">&lt;div class=&quot;callout-box callout-info&quot; &gt;
    &lt;div class=&quot;callout-icon&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;callout-content&quot;&gt;
        &lt;p&gt;Lattice has since added a note about free licenses for &amp;quot;hobbyists, enthusiasts, community educators &amp;amp; start-up companies.&amp;quot; See the Licensing section at the bottom of &lt;a href=&quot;https:&#x2F;&#x2F;www.latticesemi.com&#x2F;iCEcube2&quot;&gt;this page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

    &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;It appears that Lattice Semiconductors, the manufacture of the FPGA used in the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;boards&#x2F;cu&#x2F;&quot;&gt;Cu&lt;&#x2F;a&gt;, has decided to pull a fast one and silently change the license required to use &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;tutorials&#x2F;setup&#x2F;icecube2&#x2F;&quot;&gt;iCEcube2&lt;&#x2F;a&gt; from free to an &lt;strong&gt;expensive&lt;&#x2F;strong&gt; subscription.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s unclear when exactly this change happened, but looking at the latest snapshot from &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20240224150050&#x2F;https:&#x2F;&#x2F;www.latticesemi.com&#x2F;Support&#x2F;Licensing&quot;&gt;the wayback machine&lt;&#x2F;a&gt; on February 24th, 2024, it was still free.&lt;&#x2F;p&gt;
&lt;p&gt;On the &lt;a href=&quot;https:&#x2F;&#x2F;www.latticesemi.com&#x2F;Support&#x2F;Licensing&quot;&gt;live site&lt;&#x2F;a&gt; iCEcube2 is now only listed as &lt;em&gt;Subscription&lt;&#x2F;em&gt; for all FPGA families it supports.&lt;&#x2F;p&gt;
&lt;p&gt;Heading over to their &lt;a href=&quot;https:&#x2F;&#x2F;www.latticestore.com&#x2F;products&#x2F;tabid&#x2F;417&#x2F;searchid&#x2F;1&#x2F;searchvalue&#x2F;lsc-sw-icecube2&#x2F;default.aspx&quot;&gt;online store&lt;&#x2F;a&gt;, I&#x27;m currently seeing pricing of &lt;strong&gt;$471.31&lt;&#x2F;strong&gt; for the first year and &lt;strong&gt;$353.15&lt;&#x2F;strong&gt; to renew each additional year.&lt;&#x2F;p&gt;
&lt;p&gt;This is insane!&lt;&#x2F;p&gt;
&lt;p&gt;iCEcube2 hasn&#x27;t had any meaningful software updates in many many years. Just take a look at the &lt;a href=&quot;https:&#x2F;&#x2F;www.latticesemi.com&#x2F;Products&#x2F;DesignSoftwareAndIP&#x2F;FPGAandLDS&#x2F;iCEcube2#_B014C41EC7EA406C8BF8E943EABA6317&quot;&gt;versions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The only thing that makes sense to me is that they very much do &lt;strong&gt;not&lt;&#x2F;strong&gt; want you to use it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;contact-lattice&quot;&gt;Contact Lattice&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#contact-lattice&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;If this change bothers you as much as it does me, I highly encourage you to &lt;a href=&quot;https:&#x2F;&#x2F;www.latticesemi.com&#x2F;en&#x2F;About&#x2F;ContactUs&quot;&gt;contact Lattice&lt;&#x2F;a&gt; and let them know what you think. &lt;a href=&quot;mailto:general_inquiries@latticesemi.com&quot;&gt;Click here for their general inquiries email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve sent them an email asking what&#x27;s going on and I&#x27;ll update this post if&#x2F;when they respond.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-beacon-of-hope&quot;&gt;A Beacon of Hope&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#a-beacon-of-hope&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Luckily, we have an alternative, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YosysHQ&#x2F;icestorm&quot;&gt;Project IceStorm&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;YosysHQ&quot;&gt;Yosys&lt;&#x2F;a&gt; more generally.&lt;&#x2F;p&gt;
&lt;p&gt;The open source tools for FPGAs have continued to improve and my latest experiences with them for the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;boards&#x2F;cu&#x2F;&quot;&gt;Alchitry Cu&lt;&#x2F;a&gt; have been excellent.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;alchitry-labs&#x2F;&quot;&gt;Alchitry Labs V2&lt;&#x2F;a&gt; comes with all the necessary open source tools bundled to work with the Cu without having to compile&#x2F;install anything else.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lucid V1 to V2</title>
        <published>2024-04-01T00:00:00+00:00</published>
        <updated>2024-04-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/lucid-1-vs-2/"/>
        <id>https://alchitry.com/news/lucid-1-vs-2/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/lucid-1-vs-2/">&lt;p&gt;This post was created for people who are already familiar with Lucid V1 to get up to speed with what&#x27;s new&#x2F;different in Lucid V2.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;style-changes&quot;&gt;Style Changes&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#style-changes&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s start off with the most basic changes, those to style.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;optional-semicolons&quot;&gt;Optional Semicolons&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#optional-semicolons&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;First off, the new Lucid grammar now accepts a new line as a semicolon.&lt;&#x2F;p&gt;
&lt;p&gt;This means that as long as each expression is on a separate line, you don&#x27;t need to use semicolons at all.&lt;&#x2F;p&gt;
&lt;p&gt;This change was motivated by many modern programming languages.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trailing-commas&quot;&gt;Trailing Commas&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#trailing-commas&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Again taking inspiration from many other languages, trailing commas in lists are now supported.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt; trailingComma &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt; clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; clock
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt; rst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; reset
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt; out&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; &amp;lt;- LOOK A COMMA
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By making trailing commas optional, it helps make it easier to re-arrange items in a list or add new items to the end without modifying previous lines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;camel-case&quot;&gt;Camel Case&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#camel-case&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This is fairly subtle, but camel case is now the preferred naming format for all basic names. The libraries and examples in Lucid V1 were fairly inconsistent between &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;camelCase&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;snake_case&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is just to make things more consistent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;struct-position&quot;&gt;Struct Position&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#struct-position&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The first breaking change is that struct sizes are now specified after the array size (or name if there isn&#x27;t an array size) instead of after the type.&lt;&#x2F;p&gt;
&lt;p&gt;For example, before when declaring a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with an array of 8 structs with type &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;myStruct&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; you would write the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;myStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; mySig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is now written as the following.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; mySig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;myStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This change was made to better match how the elements in the signal are structured.&lt;&#x2F;p&gt;
&lt;p&gt;For example, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;mySig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.structElement&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is how you access the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;structElement&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; of the second element in the array.&lt;&#x2F;p&gt;
&lt;p&gt;In both cases, the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is an array of structs so the array index always comes first. &lt;&#x2F;p&gt;
&lt;p&gt;This also makes a bit more sense for the cases when you need to specify the width of a signal that doesn&#x27;t have a type.&lt;&#x2F;p&gt;
&lt;p&gt;For example, a struct declaration could look like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; myStruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    structElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;otherStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    structArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;otherStruct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;no-more&quot;&gt;No More &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;WIDTH&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#no-more&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Something that always felt kind of out of place to me was the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;WIDTH&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; attribute attached to &amp;quot;all&amp;quot; signals in Lucid V1.&lt;&#x2F;p&gt;
&lt;p&gt;While it worked for the most part, it had two issues I wanted to address. &lt;&#x2F;p&gt;
&lt;p&gt;First, it just didn&#x27;t seem to fit. There was nothing else like it in the language.&lt;&#x2F;p&gt;
&lt;p&gt;Second, it could only be used on full signals, not expressions or anything else.&lt;&#x2F;p&gt;
&lt;p&gt;Both of these are fixed by replacing it with the new &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Simply pass in whatever you want and it&#x27;ll spit out a constant value representing the width of the signal&#x2F;expression.&lt;&#x2F;p&gt;
&lt;p&gt;This fits much better as there are plenty of other functions to calculate constant values.&lt;&#x2F;p&gt;
&lt;p&gt;The use of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;WIDTH&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; was in Lucid before there were custom Lucid functions. Otherwise, it probably would&#x27;ve been a function from the beginning.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;simplification&quot;&gt;Simplification&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#simplification&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;There are a few changes made to make things a bit simpler.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loops&quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; Loops&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#loops&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For loops were replaced with the new &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; loop.&lt;&#x2F;p&gt;
&lt;p&gt;Lucid V1 used &lt;em&gt;C&lt;&#x2F;em&gt; style for loop that were easy to write in a way that would be impossible to implement in hardware.&lt;&#x2F;p&gt;
&lt;p&gt;The new &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; loop has the simple syntax of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {}&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is an optional loop variable.
&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is a constant expression.
&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;step&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are also constant expressions but are optional.
The loop will repeat &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; times and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will be set from &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; step &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;* (&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This syntax makes it impossible to write a loop with a variable number of iterations (which hardware can&#x27;t accommodate). &lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-more-1&quot;&gt;No More &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;var&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#no-more-1&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;var&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type was always a bit weird. It was basically just a 32 bit &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that you would use with for loops. &lt;&#x2F;p&gt;
&lt;p&gt;No for loops means you doubly don&#x27;t need it.&lt;&#x2F;p&gt;
&lt;p&gt;Anywhere you had a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;var&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; before could be replaced with a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bye-hello&quot;&gt;Bye &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;fsm&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, Hello &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#bye-hello&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The type &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;fsm&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; was also kind of a weird type. It was a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with a list of constants attached.&lt;&#x2F;p&gt;
&lt;p&gt;Nothing kept you from using these constants in other places in your designs and a few times I did just that. It always felt a little wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Now the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type lets you declare a list of constants that will have their values assigned by the tools just like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;fsm&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; but it is separate from any storage type.&lt;&#x2F;p&gt;
&lt;p&gt;Something like &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;fsm&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;IDLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;START_BIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DATA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STOP_BIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;state.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;START_BIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;is now replaced with&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;IDLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;START_BIT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;DATA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;STOP_BIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;span&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;state.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#da5a8c;&quot;&gt;States&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;START_BIT
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; type the only storage type.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;parameter-test-values&quot;&gt;Parameter Test Values&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#parameter-test-values&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;In Lucid V1 you had to choose between better error checking and making a parameter optional.&lt;&#x2F;p&gt;
&lt;p&gt;Lucid V2 adds the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; operator during parameter declaration to allow you to specify a test value.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s an example.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt; uartTx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;#(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;100000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; clock frequency
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1000000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; desired baud rate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)(
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both the parameter &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;CLK_FREQ&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#d45ada;&quot;&gt;BAUD&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; have test values specified. These values are used when the module is being checked for errors but hasn&#x27;t been instantiated.&lt;&#x2F;p&gt;
&lt;p&gt;If these values were omitted, the error checking code doesn&#x27;t know what they could be so it has to do its best to check for potential errors.&lt;&#x2F;p&gt;
&lt;p&gt;You could provided a value with &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; instead of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; but this allows the parameter to be omitted when it is instantiated.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; version provides a value for the error checker to use but still requires a value to be explicitly presented when instantiated.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;test-benches&quot;&gt;Test Benches&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-benches&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;A huge reason for the whole Alchitry Labs&#x2F;Lucid V2 rewrite was to add simulations.&lt;&#x2F;p&gt;
&lt;p&gt;These have been covered in a &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;news&#x2F;lucid-v2-update-2&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New Site, New Forum, New Alchitry Labs</title>
        <published>2024-03-26T00:00:00+00:00</published>
        <updated>2024-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/new-site-new-forum-new-labs/"/>
        <id>https://alchitry.com/news/new-site-new-forum-new-labs/</id>
        
        <summary type="html">&lt;p&gt;A lot has happened since the last blog post!&lt;&#x2F;p&gt;
&lt;p&gt;First lets start with the page you&#x27;re reading this on, the new website!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2.0.5 - Simulations</title>
        <published>2024-02-06T00:00:00+00:00</published>
        <updated>2024-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-0-5-simulations/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-0-5-simulations/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;Version 2.0.5-Preview&lt;&#x2F;a&gt; of Alchitry Labs is now available. It now supports simulating the main Alchitry boards as well as the Io Element.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2 - Update 3</title>
        <published>2024-01-15T00:00:00+00:00</published>
        <updated>2024-01-15T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-update-3/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-update-3/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-update-3/">&lt;p&gt;Simulations are now supported!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs-2.0.4-preview.png&quot; alt=&quot;Alchitry Labs 2.0.4 PREVIEW&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-benches&quot;&gt;Test Benches&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-benches&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The new update, &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;2.0.4-PREVIEW&lt;&#x2F;a&gt;, now has the first draft of the
simulation GUI.&lt;&#x2F;p&gt;
&lt;p&gt;To run a simulation you need to first create a test bench.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve covered these before when you could first run them from the command line so make sure
to &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;news&#x2F;lucid-v2-update-2&#x2F;&quot;&gt;check that out&lt;&#x2F;a&gt; if you haven&#x27;t already.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s been an addition to the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function though. You can still pass it a signal directly for the old behavior,
but you can now pass in a formatting string followed by the values to use.&lt;&#x2F;p&gt;
&lt;p&gt;This is similar to something like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;printf&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; in C&#x2F;C++.&lt;&#x2F;p&gt;
&lt;p&gt;The function call looks something like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;my value is %d&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; mySig&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;mySig&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is the signal to print in decimal
where the %d is.&lt;&#x2F;p&gt;
&lt;p&gt;The format options are &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;%d&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for decimal, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;%b&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for binary, &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;%h&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for hexadecimal, and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;%nf&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; for fixed point where
n is the number of fixed fractional bits (for example &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#77bf0a;&quot;&gt;&amp;quot;%2f&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;run-the-test&quot;&gt;Run the Test&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#run-the-test&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;In the code editor, when it detects a test, there is an arrow in the left hand gutter on the line where the test was
declared. You can click this arrow to run that test.&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, clicking the bug icon in the toolbar will run every test.&lt;&#x2F;p&gt;
&lt;p&gt;The results of the test are printed to the console and a new tab is opened displaying the resulting values captured at
each &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The waveform viewer is currently pretty basic but its enough to start messing with it.&lt;&#x2F;p&gt;
&lt;p&gt;You can use the mouse wheel to zoom and click&#x2F;drag to pan around.&lt;&#x2F;p&gt;
&lt;p&gt;The values at your cursor are show as an overlay.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2 - Update 2</title>
        <published>2024-01-04T00:00:00+00:00</published>
        <updated>2024-01-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-update-2/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-update-2/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-update-2/">&lt;p&gt;It&#x27;s been a while since I&#x27;ve posted an update and a lot has happened. Most of the work I&#x27;ve been putting into Alchitry Labs has been for the new GUI.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs-2.0.3-preview.png&quot; alt=&quot;Alchitry Labs 2.0.3 PREVIEW&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As I&#x27;ve mentioned in a previous blog post, this time around I&#x27;m using &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;lp&#x2F;compose-multiplatform&#x2F;&quot;&gt;Compose Multiplatform&lt;&#x2F;a&gt; for creating the UI instead of the now very old &lt;a href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;swt&#x2F;&quot;&gt;SWT&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Compose is fundamentally different from SWT and allows for a lot more freedom in creating a beautiful UI. However, since Compose for desktop is so new, there are some growing pains I&#x27;ve had to overcome.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-editor&quot;&gt;Code Editor&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#code-editor&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One of the first things I did when starting the Alchitry Labs rewrite was to see if I could make a text editor perform well with Compose. The built in &lt;code&gt;TextField&lt;&#x2F;code&gt; widget is fine for small text fields but falls apart for something as complicated as a code editor.&lt;&#x2F;p&gt;
&lt;p&gt;Compose exposes various levels of abstraction you can dig into depending on what you want to accomplish. I jumped a few layers down and created my own code editor composable. &lt;&#x2F;p&gt;
&lt;p&gt;The most important difference between my code editor and the built in &lt;code&gt;TextField&lt;&#x2F;code&gt; is that my code computes the layout of each line individually instead of the entire block of text. The big upside to this is that when text is being edited I only need to compute the lines that change instead of every single line.&lt;&#x2F;p&gt;
&lt;p&gt;This makes editing text fast no matter how big the file is.&lt;&#x2F;p&gt;
&lt;p&gt;There was a lot of complexity added to make this work but the payoff was worth it.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to performance, I was able to add some additional features that are nice to have for the code editor, such as the line numbers in the gutter. These are even flexible so I can potentially later add stuff like icons if needed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;TextField&lt;&#x2F;code&gt; also doesn&#x27;t provide any way to draw a background color behind text so I had to add this custom. This allows for highlighting the token the cursor is on as well as all matching tokens. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;tabs&quot;&gt;Tabs&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#tabs&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The next major UI hurdle was making the editor tabs work. I already had written a sash composable that would allow me to split a section into left and right or top and bottom resize-able areas (I needed it already for the main layout). However, I wanted to make splitting the editor be as easy as dragging a dropping the tab to where you want it.&lt;&#x2F;p&gt;
&lt;p&gt;Again, compose gives you plenty of tools to do this and I had already done something similar for a different project that I was able to steal most of the code from. With some modifications I ended up where it is now where you can not only drag and drop the tabs to rearrange them but drag them top any side of the window to split it.&lt;&#x2F;p&gt;
&lt;p&gt;This is definitely a step up from the previous version that requires you to split then window then drag the tab over.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;project-tree&quot;&gt;Project Tree&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#project-tree&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This is something that still needs some work, but one of the new features is that file names in the tree are color coded based on their state (yellow = has warnings, red = has errors).&lt;&#x2F;p&gt;
&lt;p&gt;This was possible because the way projects&#x2F;files are checked for errors is fundamentally different than before.&lt;&#x2F;p&gt;
&lt;p&gt;When a file is changed, an error check is queued. The error check first parses all the project files for errors like syntax errors. Then starting from the top module, the project is parsed as a tree through the module instances.&lt;&#x2F;p&gt;
&lt;p&gt;This allows for a thorough check of the modules using actual parameter values. &lt;&#x2F;p&gt;
&lt;p&gt;Some of this could be improved in the future such as caching some of the results for files that haven&#x27;t changed, but even as it is now it is quite fast.&lt;&#x2F;p&gt;
&lt;p&gt;It currently doesn&#x27;t fully check modules that fall outside the project tree (in other words, modules that are in the project but not used). I&#x27;ll add this in a later update.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;labs-and-loader&quot;&gt;Labs and Loader&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#labs-and-loader&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Alchitry Labs and the Alchitry Loader now share one executable&#x2F;launcher. This was done because it isn&#x27;t possible to create two launchers with one installer on macOS.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, when you open Alchitry Labs, it&#x27;ll open whatever you were using last.&lt;&#x2F;p&gt;
&lt;p&gt;To switch between Labs and the Loader, you simply click the Alchitry logo in the top left and choose &amp;quot;Switch to X&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;I have a feeling that most people are using either one or the other and don&#x27;t often switch between the two. If this isn&#x27;t you, let me know on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;LucidParserV2&#x2F;discussions&quot;&gt;discussion page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-it-out&quot;&gt;Test It Out&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-it-out&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;There is still a lot of features missing, but if you would like you can download the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;latest version here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Everything should be there to make a simple project, build, and load it to any of the Alchitry boards.&lt;&#x2F;p&gt;
&lt;p&gt;This also means you should be able to use this to build projects for the Alchitry Cu on a Mac.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#next-steps&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The code editor needs many quality of life improvements such as auto indenting&#x2F;formatting, auto-complete, support for Verilog, error checking for ACF files, support for Xilinx and Lattice constraint files, context menus (right click), and I&#x27;m sure endless more.&lt;&#x2F;p&gt;
&lt;p&gt;I need to also add in the component library, port the project templates to Lucid V2, and add back in support the Vivado&#x27;s IP catalog.&lt;&#x2F;p&gt;
&lt;p&gt;I also need to build the front end for running simulations. All the code is there to actually run it, there just isn&#x27;t currently a way to conveniently start it or view the results. This will likely be my first next step.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2 - Update 1</title>
        <published>2023-10-13T00:00:00+00:00</published>
        <updated>2023-10-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-update-1/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-update-1/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-update-1/">&lt;p&gt;Today was the first time I built a .bin file from Alchitry Labs V2!&lt;&#x2F;p&gt;
&lt;p&gt;Before we get too far ahead, there is a lot more to cover.&lt;&#x2F;p&gt;
&lt;p&gt;In the last release, I use the Compose Multiplatform Gradle plugin to create &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;compose-multiplatform&#x2F;blob&#x2F;master&#x2F;tutorials&#x2F;Native_distributions_and_local_execution&#x2F;README.md&quot;&gt;native distributions&lt;&#x2F;a&gt;.
At first, this seemed like an awesome solution. However, it has one fatal flaw.&lt;&#x2F;p&gt;
&lt;p&gt;The plugin requires you to build each target on its respective platform. That means if you want to build for Windows, you need to be on Windows. If you want to build for an ARM based Mac, you need to have an ARM based Mac.&lt;&#x2F;p&gt;
&lt;p&gt;This requirement was the same issue I had before with the original Alchitry Labs but it wasn&#x27;t that bad since I only ever built for Windows and Linux X64. I was able to do everything from Linux using a Window VM.&lt;&#x2F;p&gt;
&lt;p&gt;This time around, I want to add support for more systems. Alchitry Labs runs on a JVM (Java Virtual Machine) so in theory it should run in a ton of places with minimal work.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m hoping to target everything that Compose supports, Windows x64, Linux x64, Linux ARM, Mac x64, and Mac ARM.&lt;&#x2F;p&gt;
&lt;p&gt;When looking for solutions to this, I came across &lt;a href=&quot;https:&#x2F;&#x2F;www.hydraulic.dev&#x2F;&quot;&gt;Conveyor&lt;&#x2F;a&gt; which seems to be almost everything I was looking for. Best of all, it is free for open source projects like Alchitry Labs!&lt;&#x2F;p&gt;
&lt;p&gt;Conveyor lets you build for every target from a single system. It also deals with code signing and pushing updates.&lt;&#x2F;p&gt;
&lt;p&gt;The only downside right now is that it doesn&#x27;t support Linux AArch64 (ARM). I became a paid subscriber to get this feature onto the dev&#x27;s radar and I was told it will likely make it into the next major release.&lt;&#x2F;p&gt;
&lt;p&gt;Now that I have this all setup, I can run a single command that builds my project, creates update packages, creates an update website, and pushes it all to GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;You can now download the latest version from the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;GitHub page here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m currently just self signing everything. This only really matters for Windows and Macs where you&#x27;ll see more security warnings when trying to install it.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll likely get everything officially signed for the next release. For the Window&#x27;s release, this means that it&#x27;ll be available from the Microsoft Store.&lt;&#x2F;p&gt;
&lt;p&gt;The Linux version is now packaged as a deb which makes installation so much easier! Installing the deb also adds an update site so that when updates for Alchitry Labs are available they show up in the package manager with everything else.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mac-support&quot;&gt;Mac Support&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#mac-support&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;As I&#x27;ve mentioned above, the new releases have Mac versions.&lt;&#x2F;p&gt;
&lt;p&gt;Before you get too excited, no, you still can&#x27;t run Vivado or iceCube 2 on a Mac. This means that you still can&#x27;t build FPGA projects using the proprietary tools.&lt;&#x2F;p&gt;
&lt;p&gt;So why bother supporting Macs? First, many people run the build tools inside of virtual machines inside a Mac. USB devices don&#x27;t always play nicely going across the VM layer so by having native support for the Alchitry Loader, we can avoid that issue.&lt;&#x2F;p&gt;
&lt;p&gt;The Mac versions of the loader are already working!&lt;&#x2F;p&gt;
&lt;p&gt;Second, there are open source tools that &lt;em&gt;can&lt;&#x2F;em&gt; run on a Mac. I&#x27;m hoping to bundle these with a later release of Alchitry Labs so that you will be able to develop for the Alchitry Cu natively on a Mac.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-new-verilog-converter&quot;&gt;The New Verilog Converter&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#the-new-verilog-converter&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The biggest update to the Alchitry Labs V2 codebase is the Verilog converter.&lt;&#x2F;p&gt;
&lt;p&gt;Continuing with the full rewrite, the new converter is much cleaner than the old one. The original converter was one of the first things I wrote back when the IDE was the &amp;quot;Mojo IDE.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Back then, the converted was responsible for everything. Given some Lucid text, it had to spit out a Verilog version.&lt;&#x2F;p&gt;
&lt;p&gt;The new converted is instead given a fully parsed Lucid module instance. A lot of the complicated tasks are already done in the previous stage such as dealing with signal indexing, declarations, etc.&lt;&#x2F;p&gt;
&lt;p&gt;This, along with better coding practices, has made the new converter about 40% of the size of the original! I&#x27;m pretty excited for it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;acf-parser&quot;&gt;ACF Parser&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#acf-parser&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;With a Lucid-&amp;gt;Verilog translator working, the next step was to add support for constraint files.&lt;&#x2F;p&gt;
&lt;p&gt;The Alchitry Constraint File format is super simple and adding a parser for it wasn&#x27;t too complicated.&lt;&#x2F;p&gt;
&lt;p&gt;I ended up modifying the format a bit from V1 though. &lt;&#x2F;p&gt;
&lt;p&gt;Keeping with the change to Lucid, semicolons are now optional. Also, clock statements are considered a special type of pin statement so you don&#x27;t need to specify both for a single pin.&lt;&#x2F;p&gt;
&lt;p&gt;It now checks that the names of the ports and pins are valid. Wildly, I apparently never checked the pin names properly for V1 so they would just show up as &amp;quot;null&amp;quot; in the converted constraint file and cause silent issues.&lt;&#x2F;p&gt;
&lt;p&gt;For now, I just have an ACF-&amp;gt;XDC converter (XDC is the Xilinx format).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-build&quot;&gt;Test Build&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-build&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;With all the pieces in place, I was able to get a test build running.&lt;&#x2F;p&gt;
&lt;p&gt;Once a project is open, calling &lt;code&gt;Project.build()&lt;&#x2F;code&gt; simply builds the entire project!&lt;&#x2F;p&gt;
&lt;p&gt;This only works for the Au&#x2F;Au+ right now as I still have to port the Cu builders but it is a big milestone!&lt;&#x2F;p&gt;
&lt;p&gt;Building Au projects is accessible from the command line interface now.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to check out the progress, see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&quot;&gt;the GitHub page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can install the &lt;a href=&quot;https:&#x2F;&#x2F;alchitry.com&#x2F;Alchitry-Labs-V2&#x2F;download.html&quot;&gt;latest version here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Loader V2</title>
        <published>2023-09-18T00:00:00+00:00</published>
        <updated>2023-09-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-loader-v2/"/>
        <id>https://alchitry.com/news/alchitry-loader-v2/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-loader-v2/">&lt;p&gt;The Alchitry Loader portion of the Alchitry Labs V2 rewrite is mostly done!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;loader-alpha.png&quot; alt=&quot;Alchitry Loader&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The new loader automatically detects connected boards and lists them in a drop down. This allows you to have more than one board connected without conflict.&lt;&#x2F;p&gt;
&lt;p&gt;Under the hood, it now also handles the D2XX driver a bit more elegantly. It first tries to load the proprietary D2XX library (libd2xx) and if it fails, it falls back to the open source libUSB driver.&lt;&#x2F;p&gt;
&lt;p&gt;On Windows, you&#x27;ll almost always be using D2XX from FTDI. However, on Linux, libUSB is the default but you can install libd2xx and it&#x27;ll be detected and used.&lt;&#x2F;p&gt;
&lt;p&gt;There are still a few weird kinks to work out but it is overall usable (and an improvement over the old one).&lt;&#x2F;p&gt;
&lt;p&gt;On Windows, I haven&#x27;t been able to figure out how to configure the installer to not install a shortcut for the command line interface version of the launcher. After running the installer, you&#x27;ll see a shortcut called &amp;quot;alchitry&amp;quot; which doesn&#x27;t seem to do anything. This is the command line interface launcher.&lt;&#x2F;p&gt;
&lt;p&gt;There seems to be a bug in &lt;code&gt;jpackage&lt;&#x2F;code&gt; that ignores the value of the &lt;code&gt;--win-shortcut&lt;&#x2F;code&gt; option and always makes shortcuts. I&#x27;ll have to dig into more eventually.&lt;&#x2F;p&gt;
&lt;p&gt;On Linux, I&#x27;ve been having a hard time getting the window&#x27;s icon to be set correctly. On Gnome, it seems to be working but on Ubuntu (22.04) it shows the default Java icon and has some kind of secondary ghost window that you can&#x27;t focus.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;installers&quot;&gt;Installers&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#installers&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;Alchitry%20Labs-2.0.0-ALPHA-1.msi&quot;&gt;Windows Installer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs_2.0.0-ALPHA-1-1_amd64.deb&quot;&gt;Linux Installer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2 - Command Line Interface</title>
        <published>2023-09-11T00:00:00+00:00</published>
        <updated>2023-09-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2-cli/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2-cli/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2-cli/">&lt;p&gt;It has been a while since I last wrote about the progress on Alchitry Labs V2 and a lot has changed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build-tools&quot;&gt;Build Tools&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#build-tools&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve spent a good amount of time working on building out the Gradle build script so that the deployment process will be much easier than it was for Alchitry Labs V1.&lt;&#x2F;p&gt;
&lt;p&gt;When I was looking for a way to create the Window&#x27;s installer, I discovered that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;compose-multiplatform&#x2F;tree&#x2F;master&quot;&gt;Compose Multiplatform&lt;&#x2F;a&gt; has a built-in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;compose-multiplatform&#x2F;blob&#x2F;master&#x2F;tutorials&#x2F;Native_distributions_and_local_execution&#x2F;README.md&quot;&gt;packaging tool&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that this still has the major downside of needing to be running on the OS that you want to package for. This means you can&#x27;t build an installer for Windows from Linux. Bummer, but not the end of the world.&lt;&#x2F;p&gt;
&lt;p&gt;I ran into two other issues when flushing out the build script. First, Compose&#x27;s build tools only support creating one launcher per application. I need to create two. The main one to launch Alchitry Labs and the second to launch the Alchitry Loader.&lt;&#x2F;p&gt;
&lt;p&gt;These two programs are actually the same thing with just a different argument passed to them to show a different GUI.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that jpackage, the tool used by Compose, has a way to add additional launchers but Compose currently gives no way to access it. I add the support I needed, I forked the Compose plugin and submitted a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;compose-multiplatform&#x2F;pull&#x2F;3640&quot;&gt;pull request&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For now, I&#x27;m using my local forked version of the Compose plugin, but hopefully they&#x27;ll accept the pull request or make some similar changes to allow creating additional launchers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;command-line-interface&quot;&gt;Command Line Interface&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#command-line-interface&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Something I often get emails about is for command line support in Alchitry Labs. Well, I&#x27;m happy to announce that the command line interface for Alchitry Labs V2 will be well supported.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve decided to get everything working via the command line before diving too much into the GUI.&lt;&#x2F;p&gt;
&lt;p&gt;Right now, the loading tools already work. So if you&#x27;ve been looking for a way to load your Alchitry boards from the command line, check out the very early releases below.&lt;&#x2F;p&gt;
&lt;p&gt;The command line is broken into a bunch of subcommands.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ alchitry --help
&lt;&#x2F;span&gt;&lt;span&gt;Usage: alchitry_labs options_list
&lt;&#x2F;span&gt;&lt;span&gt;Subcommands: 
&lt;&#x2F;span&gt;&lt;span&gt;    new - Create a new project
&lt;&#x2F;span&gt;&lt;span&gt;    clone - Clone an existing project
&lt;&#x2F;span&gt;&lt;span&gt;    check - Check a project for errors
&lt;&#x2F;span&gt;&lt;span&gt;    build - Build an Alchitry Project
&lt;&#x2F;span&gt;&lt;span&gt;    load - Load a project or .bin file
&lt;&#x2F;span&gt;&lt;span&gt;    sim - Simulate a project
&lt;&#x2F;span&gt;&lt;span&gt;    labs - Launch Alchitry Labs GUI
&lt;&#x2F;span&gt;&lt;span&gt;    loader - Launch Alchitry Loader GUI
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Options: 
&lt;&#x2F;span&gt;&lt;span&gt;    --help, -h -&amp;gt; Usage info 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you install the .deb on Linux, you&#x27;ll get access to the &lt;code&gt;alchitry&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;On Windows, the &lt;code&gt;Alchitry.exe&lt;&#x2F;code&gt; executable in the installation directory can be used.&lt;&#x2F;p&gt;
&lt;p&gt;You can run &lt;code&gt;--help&lt;&#x2F;code&gt; on each subcommand for more info.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ alchitry load --help
&lt;&#x2F;span&gt;&lt;span&gt;Usage: alchitry_labs load options_list
&lt;&#x2F;span&gt;&lt;span&gt;Options: 
&lt;&#x2F;span&gt;&lt;span&gt;    --project, -p -&amp;gt; Alchitry project file { String }
&lt;&#x2F;span&gt;&lt;span&gt;    --flash, -f [false] -&amp;gt; Load project to FPGA&amp;#39;s flash (persistent) 
&lt;&#x2F;span&gt;&lt;span&gt;    --ram, -r [false] -&amp;gt; Load project to FPGA&amp;#39;s RAM (temporary) 
&lt;&#x2F;span&gt;&lt;span&gt;    --list, -l [false] -&amp;gt; List all detected boards 
&lt;&#x2F;span&gt;&lt;span&gt;    --device, -d [0] -&amp;gt; Index of device to load { Int }
&lt;&#x2F;span&gt;&lt;span&gt;    --bin -&amp;gt; Bin file to load { String }
&lt;&#x2F;span&gt;&lt;span&gt;    --board, -b -&amp;gt; Board used in the project { Value should be one of [Au, Au+, Cu] }
&lt;&#x2F;span&gt;&lt;span&gt;    --help, -h -&amp;gt; Usage info 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For example, you can load a .bin file like this.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282828;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;$ alchitry load --bin alchitry.bin -b Au+ --flash
&lt;&#x2F;span&gt;&lt;span&gt;Checking IDCODE...
&lt;&#x2F;span&gt;&lt;span&gt;Loading bridge configuration...
&lt;&#x2F;span&gt;&lt;span&gt;Erasing...
&lt;&#x2F;span&gt;&lt;span&gt;Flashing 100% │███████████████████████████████████│ 335339&#x2F;335339 (0:00:01 &#x2F; 0:00:00) 
&lt;&#x2F;span&gt;&lt;span&gt;Resetting FPGA...
&lt;&#x2F;span&gt;&lt;span&gt;Done.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you try this out, let me know what you think over at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;discussions&quot;&gt;discussions page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;releases&quot;&gt;Releases&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#releases&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;These aren&#x27;t really a &amp;quot;release&amp;quot; as much as just something you can try and mess around with.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, the loading features should be fully working.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;alchitry-labs_2.0.0-ALPHA-0-1_amd64.deb&quot;&gt;Linux Deb&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cdn.alchitry.com&#x2F;labs-v2&#x2F;Alchitry-2.0.0-ALPHA-0.msi&quot;&gt;Windows Installer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Labs GUI will open but it doesn&#x27;t really do much. It is basically just a test right now for the custom text editor.&lt;&#x2F;p&gt;
&lt;p&gt;The Loader GUI doesn&#x27;t open&#x2F;exist at all yet.&lt;&#x2F;p&gt;
&lt;p&gt;The command line tools work for creating and simulating projects as well as loading .bin files.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Alchitry Labs V2</title>
        <published>2023-06-07T00:00:00+00:00</published>
        <updated>2023-06-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/alchitry-labs-v2/"/>
        <id>https://alchitry.com/news/alchitry-labs-v2/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/alchitry-labs-v2/">&lt;p&gt;I am now starting to work on the UI of the Alchitry Labs rewrite!&lt;&#x2F;p&gt;
&lt;p&gt;Alchitry Labs currently use UI toolkit, SWT. 
This is the UI toolkit developed and used by Eclipse.
At the time I started working on what was then the Mojo IDE, SWT was a solid choice.
It allowed me to create a single UI that worked on Windows and Linux with minimal effort, and it looked native on both
platforms.&lt;&#x2F;p&gt;
&lt;p&gt;However, it hasn&#x27;t aged super well.&lt;&#x2F;p&gt;
&lt;p&gt;I found it to be fairly limited when trying to do anything custom.
For example, I wanted the project tree on the left side of the window to stay the same size when you resized the window.
The main code editor should be the only thing that changes size to accommodate the new window size.
SWT doesn&#x27;t allow for this, and instead you specify the size of each side as a percent.
My workaround was to recalculate the percentages every time the window size changes to keep one side a fixed size.
This mostly works, but if you resize the window a lot, you may notice the divider jumps around due to rounding errors.&lt;&#x2F;p&gt;
&lt;p&gt;In newer versions of SWT, something changed&#x2F;broke that broke the tooltip window from popping up when hovering over an
error in the text editor.
I spend a stupid amount of time trying to figure out a fix for this before giving up and sticking with an old version
of the library.
This annoyingly prevents other bugs from getting fixed though.&lt;&#x2F;p&gt;
&lt;p&gt;One of the worst offenders is the undo&#x2F;redo bug in the current Alchitry Labs. 
I&#x27;ve spent days trying to get the undo&#x2F;redo function to be reliable, but for whatever reason, the way SWT handles the
edit events have prevented me from getting it to always work. V2 already has a fully reliable undo&#x2F;redo working.&lt;&#x2F;p&gt;
&lt;p&gt;TLDR, I&#x27;m moving to something else.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jetpack-compose&quot;&gt;Jetpack Compose&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#jetpack-compose&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;If you do any UI work and haven&#x27;t tried &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;compose-multiplatform&quot;&gt;Jetpack Compose&lt;&#x2F;a&gt; you&#x27;re 
missing out.&lt;&#x2F;p&gt;
&lt;p&gt;This is a declarative UI framework originally developed for use on Android, but it has since made its way onto more 
platforms including desktop.&lt;&#x2F;p&gt;
&lt;p&gt;I find it a joy to use, and it doesn&#x27;t lock you into anything allowing me to create whatever custom UI elements or 
tweaks I need.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, the built-in text editor (TextField) has terrible performance if you are trying to edit any decent amount
of text.
This led me to write my own custom editor that has solid performance for thousands of lines of code.&lt;&#x2F;p&gt;
&lt;p&gt;While this was a substantial amount of work, it also opens up potential in the future for doing cool tricks like 
collapsable blocks. This was impossible with SWT.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lucid-parser&quot;&gt;Lucid Parser&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#lucid-parser&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve also implemented the snapshots for &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and added &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$silentTick&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; which skips the snapshot step.
The snapshots get compiled into a simulation result that holds the value of every signal in the design for every call
of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This will allow the UI to display the results of the entire simulation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-repo&quot;&gt;The Repo&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#the-repo&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The Lucid Parser repo has been renamed to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&quot;&gt;Alchitry Labs V2&lt;&#x2F;a&gt; and now 
contains the UI and parser code. 
This is where all the progress can be found.&lt;&#x2F;p&gt;
&lt;p&gt;There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;Alchitry-Labs-V2&#x2F;discussions&quot;&gt;discussion page&lt;&#x2F;a&gt;, or you can 
&lt;a href=&quot;mailto:justin@alchitry.com&quot;&gt;email me&lt;&#x2F;a&gt; and let me know your thoughts.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lucid V2 - Update 2 - Test Benches</title>
        <published>2023-06-01T00:00:00+00:00</published>
        <updated>2023-06-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/lucid-v2-update-2/"/>
        <id>https://alchitry.com/news/lucid-v2-update-2/</id>
        
        <content type="html" xml:base="https://alchitry.com/news/lucid-v2-update-2/">&lt;p&gt;Test benches are here!&lt;&#x2F;p&gt;
&lt;p&gt;I just pushed a working draft of the test bench code that has the necessities for writing quick tests for you modules!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-bench-example&quot;&gt;Test Bench Example&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-bench-example&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Take a look at this revolutionary counter module I created. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt; counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt; clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;dff&lt;&#x2F;span&gt;&lt;span&gt; counter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;] (&lt;&#x2F;span&gt;&lt;span&gt;.clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        counter.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; counter.q
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I designed it so that the output &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; will increment by one on every rising edge of the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; input. However, does 
it actually work?!? There&#x27;s no way to know. Oh wait, we could test it.&lt;&#x2F;p&gt;
&lt;p&gt;Here is my test bench that does just that.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;testBench myTestBench &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0a8dbf;&quot;&gt;sig&lt;&#x2F;span&gt;&lt;span&gt; clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; signal to use as my clock
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    counter dut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;.clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; device under test
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; tickClock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt; simpleTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#969696;&quot;&gt;&#x2F;&#x2F; initialize the clock
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;dut.count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;dut.count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tickClock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;dut.count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The insides of a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;testBench&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; are very similar to a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#faac1f;&quot;&gt;module&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; with a couple of key differences. There are no ports
or parameters and instead of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;always&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks you use &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;test&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; blocks.&lt;&#x2F;p&gt;
&lt;p&gt;On line 2, we create a signal named &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that will act as our clock.&lt;&#x2F;p&gt;
&lt;p&gt;On line 4, we instantiate the device under test or &amp;quot;dut&amp;quot;. It is convention to call the module being tested &amp;quot;dut&amp;quot; but 
there is nothing special about the name.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we have our function declaration. Functions have the same properties as tests, but they aren&#x27;t run directly. 
Instead, functions are little pieces of helper code that can be called from tests.&lt;&#x2F;p&gt;
&lt;p&gt;Here I defined the very common function of toggling the clock and called it &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;tickClock&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. This function doesn&#x27;t have any
parameters, but it could.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we could give it a parameter to repeat a specified number of times.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lucid&quot; style=&quot;background-color:#282828;color:#ffffff;&quot; class=&quot;language-lucid &quot;&gt;&lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span&gt; tickClock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;]) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;times&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        clk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Function arguments act the same as module inputs and can be multidimensional arrays or structs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-bench-functions&quot;&gt;Test Bench Functions&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#test-bench-functions&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Before we move on, let me quickly go over the couple of test bench specific functions that I&#x27;m using.&lt;&#x2F;p&gt;
&lt;p&gt;The function &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is at the very core of the simulation. It initiates a simulation tick. So what is a simulation
tick? This is when the simulator publishes all signal changes and recalculates the outputs for all the pieces in the 
design whose input signals changed. Those output changes then trigger other updates if they are used as inputs. This 
continues until the results of everything stabilize.&lt;&#x2F;p&gt;
&lt;p&gt;The only time it won&#x27;t stabilize is if you have some kind of dependency loop like &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; and &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= ~&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;. In this case, 
the simulator will quit after 1000 iterations. I chose this number as a seemingly nice upper bound, but it may change if
I find designs often need more or fewer iterations. A loop like this would result in faulty hardware, and anything 
requiring too many iterations to resolve would likely be too complicated to do in a single real clock cycle.&lt;&#x2F;p&gt;
&lt;p&gt;So back to the test bench. Before we call &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;, first we need to set a value to all signals we are using. Signals 
default to having a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bx&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; value so bad things will happen if we call &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; before setting a real value. By bad things,
I mean that &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;bx&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; value will propagate throughout the design contaminating our counter.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;clk&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; set to 0, we call &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; to initialize the design.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we hit a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#0abfbf;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; block that will repeat its contents 100 times and use the signal &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; as the iteration index.&lt;&#x2F;p&gt;
&lt;p&gt;The first line in the loop prints the value of &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dut.count&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; using the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function. This function takes one
argument, the value to print. It currently outputs the value in the format &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span&gt;dut.count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;00011100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;} : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a269dc;&quot;&gt;28&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; where the value
is shown in its binary form as well as its decimal value (if it has one).&lt;&#x2F;p&gt;
&lt;p&gt;The next line uses the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; function to check that the value of the counter matches the loop iteration we are on.
The argument to &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; can be anything, and it is treated as a boolean. That means if it is non-zero, nothing 
happens, but if it is zero, the simulation is aborted and the &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$assert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that caused it is called out.&lt;&#x2F;p&gt;
&lt;p&gt;This is very useful for checking values quickly without having to look back through the simulation manually to see if 
values make sense.&lt;&#x2F;p&gt;
&lt;p&gt;The last line in the loop is the call to the function &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tickClock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; that we already defined.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we end our test by checking that the counter output is 100 after the 100 cycles.&lt;&#x2F;p&gt;
&lt;p&gt;This example is from one of the tests and can be found in the 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;LucidParserV2&#x2F;blob&#x2F;9795d9dcea1a769be7567025b15607549c36edc3&#x2F;src&#x2F;test&#x2F;kotlin&#x2F;TestBenchTests.kt#L45&quot;&gt;repo here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-step&quot;&gt;Next Step&lt;a class=&quot;anchor&quot; aria-hidden=&quot;true&quot; href=&quot;#next-step&quot; hidden=&quot;&quot;&gt;#&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The next step is to add snapshots of the entire design every time &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; is called. This will allow for the 
simulation results to be shown after it is run. Currently, it just runs discarding all intermediate values.&lt;&#x2F;p&gt;
&lt;p&gt;I also plan to have a &lt;code class =&quot;language-lucid&quot; data-lang=&quot;lucid&quot;&gt;&lt;span style=&quot;color:#1bddaf;&quot;&gt;$silentTick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed4343;&quot;&gt;()&lt;&#x2F;span&gt;&lt;&#x2F;code&gt; or similarly named function that does a tick without taking a snapshot. This way
you can use that when making the clock fall for most designs and avoid the overhead of an entire snapshot.&lt;&#x2F;p&gt;
&lt;p&gt;As before, there is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alchitry&#x2F;LucidParserV2&#x2F;discussions&quot;&gt;discussion page&lt;&#x2F;a&gt; setup as part of the repo
where you can let me know your thoughts.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lucid V2 - Update 1</title>
        <published>2023-05-30T00:00:00+00:00</published>
        <updated>2023-05-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/lucid-v2-update-1/"/>
        <id>https://alchitry.com/news/lucid-v2-update-1/</id>
        
        <summary type="html">&lt;p&gt;I just pushed what I believe is the last piece of the core Lucid 2 rewrite.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Lucid V2</title>
        <published>2023-05-18T00:00:00+00:00</published>
        <updated>2023-05-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Justin Rajewski
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alchitry.com/news/lucid-v2/"/>
        <id>https://alchitry.com/news/lucid-v2/</id>
        
        <summary type="html">&lt;p&gt;A full rewrite of the Lucid parser in Alchitry Labs has been a long time coming.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
